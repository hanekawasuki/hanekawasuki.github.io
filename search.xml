<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>正则表达式</title>
      <link href="/2023/03/17/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2023/03/17/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h5 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">?<span class="comment">//匹配出现 0次 或者 1次的字符</span></span><br><span class="line">*<span class="comment">//匹配出现 0次 或者 多次的字符</span></span><br><span class="line">+<span class="comment">//匹配出现 1次 以上的字符</span></span><br><span class="line">b&#123;<span class="number">6</span>&#125;<span class="comment">//匹配 b 出现 6次 的字符串</span></span><br><span class="line">b&#123;<span class="number">6</span>,&#125;<span class="comment">//匹配 b 出现 6次以上 的字符串</span></span><br><span class="line">(ab)&#123;<span class="number">6</span>&#125;<span class="comment">//匹配 ab 出现 6次 的字符串</span></span><br></pre></td></tr></table></figure><h5 id="“或”运算"><a href="#“或”运算" class="headerlink" title="“或”运算"></a>“或”运算</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a (cat|dog)<span class="comment">//匹配含有 a cat 或 a dog 的字符串</span></span><br><span class="line">[abc]+    <span class="comment">//要求匹配的字符串只能由abc组成</span></span><br><span class="line">[a-z]+    <span class="comment">//匹配所有的小写英文字符</span></span><br><span class="line">[A-Z]+    <span class="comment">//匹配所有的大写英文字符</span></span><br><span class="line">[a-zA-Z]+<span class="comment">//匹配所有的英文字符</span></span><br><span class="line">[<span class="number">0</span>-<span class="number">9</span>]+<span class="comment">//匹配所有的数字</span></span><br><span class="line">[^<span class="number">0</span>-<span class="number">9</span>]+<span class="comment">//匹配所有的非数字字符</span></span><br></pre></td></tr></table></figure><h5 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">\d<span class="comment">//代表 数字字符</span></span><br><span class="line">\w<span class="comment">//代表 单词字符(英文,数字及下划线)</span></span><br><span class="line">\s<span class="comment">//代表 空白符(包含Tab和换行符)</span></span><br><span class="line">\D<span class="comment">//代表 非数字字符</span></span><br><span class="line">\W<span class="comment">//代表 非单词字符</span></span><br><span class="line">\S<span class="comment">//代表 非空白字符</span></span><br><span class="line">\b<span class="comment">//标注字符的边界</span></span><br><span class="line">^<span class="comment">//匹配行首</span></span><br><span class="line">$<span class="comment">//匹配行尾</span></span><br><span class="line">.<span class="comment">//代表 任意字符(不包括换行符)</span></span><br></pre></td></tr></table></figure><h5 id="贪婪与懒惰匹配"><a href="#贪婪与懒惰匹配" class="headerlink" title="贪婪与懒惰匹配"></a>贪婪与懒惰匹配</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>This is a sample text<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用 /&lt;.+&gt; 默认匹配上面全部 --&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 而使用 /&lt;.+?&gt; 加上 ? 就会切换为懒惰匹配,匹配下面的内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span> <span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.RGB颜色值匹配</span></span><br><span class="line">/#[a-fA-<span class="variable constant_">F0</span>-<span class="number">9</span>]&#123;<span class="number">6</span>&#125;\b</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.Ipv4地址匹配</span></span><br><span class="line">/\<span class="title function_">b</span>(<span class="params">(<span class="number">25</span>[<span class="number">0</span>-<span class="number">5</span>] | <span class="number">2</span>[<span class="number">0</span>-<span class="number">4</span>]\d | [<span class="number">01</span>]?\d\d?)\.</span>)&#123;<span class="number">3</span>&#125;(<span class="number">25</span>[<span class="number">0</span>-<span class="number">5</span>]|<span class="number">2</span>[<span class="number">0</span>-<span class="number">4</span>]\d|[<span class="number">01</span>]?\d\d?)\b</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端编程题</title>
      <link href="/2022/12/05/%E5%89%8D%E7%AB%AF%E7%BC%96%E7%A8%8B%E9%A2%98/"/>
      <url>/2022/12/05/%E5%89%8D%E7%AB%AF%E7%BC%96%E7%A8%8B%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>将字符串”get-element-by-id”转化成驼峰表示法的”getElementById”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用字符串的replace方法  4个参数分别为 匹配的文本 括号中匹配的文本 匹配文本的索引 原字符串</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;get-element-by-id&quot;</span></span><br><span class="line"><span class="keyword">var</span> newstr = str.<span class="title function_">replace</span>(<span class="regexp">/-([a-z])/g</span>,<span class="function">(<span class="params">match,p1,index,input</span>) =&gt;</span> (p1.<span class="title function_">toUpperCase</span>()))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newstr)</span><br></pre></td></tr></table></figure><p>用数组方法把下面数组中的元素加起来，得到的和赋值给result变量，var arr = [1,2,3,4,5]，result;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用数组的reduce方法  4个参数分别为 累计值 当前元素 当前元素的索引 原始数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">result = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc,cur,index,arr</span>) =&gt;</span> ( acc + cur ))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><p>编写一个函数，它没有参数，函数的返回值是一个数组，数组内是8个随机且不重复的整数，整数范围在[5,20]之间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">GetRandomArr</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">8</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> num = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">16</span> + <span class="number">4</span>)</span><br><span class="line">        <span class="keyword">if</span> (arr.<span class="title function_">indexOf</span>(num) !== -<span class="number">1</span>) &#123;</span><br><span class="line">            i--;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arr.<span class="title function_">push</span>(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不用循环语句创建一个长度为10的数组，每个元素的值等于它的索引</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="title class_">Array</span>(<span class="number">11</span>).<span class="title function_">join</span>(<span class="string">&quot;1&quot;</span>).<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">value,index</span>) =&gt;</span> ( index ))</span><br></pre></td></tr></table></figure><p>用递归实现一个简单的函数，返回一个布尔值，检测某个字符串是否为回文，例如”aabaa”返回true</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">palindrome</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (str.<span class="property">length</span> &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (str[<span class="number">0</span>] !== str[str.<span class="property">length</span>-<span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">palindrome</span>(str.<span class="title function_">substr</span>(<span class="number">1</span>,str.<span class="property">length</span>-<span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用纯CSS实现一个三角形</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">50px</span> solid transparent;<span class="comment">/* 三角形的底边长为50 */</span></span><br><span class="line">    <span class="attribute">border-bottom-color</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用javascript实现冒泡排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>]</span><br><span class="line"><span class="comment">// 第一种方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">BubbleSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j=i+<span class="number">1</span>; j&lt;arr.<span class="property">length</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt; arr[j]) &#123;</span><br><span class="line">                temp = arr[i];</span><br><span class="line">            arr[i] = arr[j];</span><br><span class="line">            arr[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第二种方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> temp;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>-<span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span>-<span class="number">1</span>-i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">        temp = arr[j];</span><br><span class="line">        arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">        arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何利用数组解构交换两个变量的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">[a,b] = [b,a];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a,b);</span><br></pre></td></tr></table></figure><p>不使用CSS属性border，使用其他属性模拟边框</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 使用 box-shadow 属性模拟边框 */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> pink,</span><br><span class="line">        <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> orange,</span><br><span class="line">        <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> blue inset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>统计某个字符串中每个字符出现的次数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">count</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = &#123;&#125;;</span><br><span class="line">    <span class="keyword">let</span> arr = str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (result[arr[i]]) &#123;</span><br><span class="line">            result[arr[i]]++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result[arr[i]] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> result) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`&quot;<span class="subst">$&#123;key&#125;</span>&quot;这个字符出现了<span class="subst">$&#123;result[key]&#125;</span>次`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写一个函数，能让两个并不大的小数正确相乘</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">multiple</span>(<span class="params">num1,num2</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> s1 = num1.<span class="title function_">toString</span>();</span><br><span class="line">    <span class="keyword">var</span> s2 = num2.<span class="title function_">toString</span>();</span><br><span class="line">    m += s1.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)[<span class="number">1</span>].<span class="property">length</span>;</span><br><span class="line">    m += s2.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)[<span class="number">1</span>].<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="title class_">Number</span>(s1.<span class="title function_">replace</span>(<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;&#x27;</span>)) * <span class="title class_">Number</span>(s2.<span class="title function_">replace</span>(<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;&#x27;</span>));</span><br><span class="line">    result = result / <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">10</span>,m);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请为div元素设计一个水平位移60px的动画，要求持续时间为2s，循环无限次，有连贯性，在动画执行到一半时，水平位移为30px</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation</span>: move <span class="number">2s</span> linear infinite alternate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> move &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">30px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">60px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表达式 a ==  1&amp;&amp; a == 2 &amp;&amp; a == 3 的结果为true,那么a的值是什么？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">当 == 运算符的一边是一个对象，而另一边是一个数字时，对象要先做ToPrimitive操作，即先调用</span></span><br><span class="line"><span class="comment">valueOf()方法,如果返回基本类型的值就用该值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    <span class="attr">digit</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="title function_">valueOf</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">digit</span>++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a == <span class="number">1</span> &amp;&amp; a==<span class="number">2</span> &amp;&amp; a==<span class="number">3</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>封装一个函数，能将字符串”abcdef”逆序为”fedcba”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">&#x27;abcdef&#x27;</span>;</span><br><span class="line"><span class="title class_">ReverseStr</span> = str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">ReverseStr</span>);</span><br></pre></td></tr></table></figure><p>封装一个函数，弥补isNaN()函数的缺点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// isNaN() 的判断过程:</span></span><br><span class="line"><span class="comment">//  &gt; 首先进行类型检测,如果传入的参数不是数值类型,则将传入的参数转为数值类型</span></span><br><span class="line"><span class="comment">//  tips: &#x27;char&#x27;,undefined 这些值被转为数值类型时,会被转换为 NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(&#123;&#125;))            <span class="comment">//true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>( ))             <span class="comment">//true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="string">&#x27;can&#x27;</span>))         <span class="comment">//true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="literal">undefined</span>))     <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isNaNPro</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">&#x27;number&#x27;</span> &amp;&amp; <span class="built_in">isNaN</span>(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>怎样用JSON对象执行深拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用JSON对象执行深拷贝需要几个前置条件，首先属性值不能是 undefined,NaN或Infinity;</span></span><br><span class="line"><span class="comment">// 其次不能是 函数 变量 对象实例 或 正则表达式</span></span><br><span class="line"><span class="comment">// 所以用 JSON 对象实现深拷贝时，只能使用一些简单数据类型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请用多种方式获取当前时间的毫秒数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();<span class="comment">// 前三种方法都需要使用 实例date</span></span><br><span class="line"><span class="comment">//1.</span></span><br><span class="line">+date</span><br><span class="line"><span class="comment">//2.</span></span><br><span class="line">date.<span class="title function_">getTime</span>()</span><br><span class="line"><span class="comment">//3.</span></span><br><span class="line">date.<span class="title function_">valueOf</span>()</span><br><span class="line"><span class="comment">//4.</span></span><br><span class="line"><span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br></pre></td></tr></table></figure><p>编写一个格式化字符串函数，例如，传入”我叫 {0} ,我的性别是 {1}” 和 [“羽川翼”,”女”]时返回一个字符串</p><p>“我叫羽川翼,我的性别是女”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">strFormat</span>(<span class="params">format,arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> format</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> index <span class="keyword">in</span> arr) &#123;</span><br><span class="line">        <span class="keyword">var</span> value = arr[index]</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> pattern = <span class="string">&quot;\\&#123;&quot;</span>+index+<span class="string">&quot;\\&#125;&quot;</span>;</span><br><span class="line">            format = format.<span class="title function_">replace</span>(<span class="keyword">new</span> <span class="title class_">RegExp</span>(pattern,<span class="string">&quot;gm&quot;</span>),value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> format;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用 JavaScript 封装一个函数，可实现整数的千分位逗号分隔符，比如 1234567 用 123,456,7 表示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">thousandBitSeparator</span>(<span class="params">num</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> num != <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num.<span class="title function_">toString</span>().<span class="title function_">replace</span>(<span class="regexp">/(\d)(?=(\d&#123;3&#125;)+$)/g</span>,<span class="keyword">function</span>(<span class="params">match</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> match + <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用 JavaScript对下面数组进行降序排列，即根据 a 属性的值从大到小排列</p><p>var arr = [{a:3},{a:2},{a:1},{a:5},{a:4}];</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//x.a - y.a 升序排列</span></span><br><span class="line"><span class="comment">//y.a - x.a 降序排列</span></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">x,y</span>) =&gt;</span> y.<span class="property">a</span> - x.<span class="property">a</span>) </span><br></pre></td></tr></table></figure><p>如何判断某一年是闰年?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 闰年的二月份有29天</span></span><br><span class="line"><span class="comment">// 把月份设为 3月，也就是2，天数设为0，就能得到上个月的最后一天</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isLeapYear</span>(<span class="params">year</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(year,<span class="number">2</span>,<span class="number">0</span>).<span class="title function_">getDate</span>() == <span class="number">29</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何取出数组中的最大值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>(...arr)<span class="comment">// ES6 新语法 ... 展开运算符</span></span><br></pre></td></tr></table></figure><p>编写一个函数，用于清除字符串前后的空格</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">trim</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> str.<span class="title function_">replace</span>(<span class="regexp">/^\s+|\s+$/g</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何计算两个日期相隔的天数？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">DateInterval</span>(<span class="params">start,end</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> diff = <span class="title class_">Math</span>.<span class="title function_">abs</span>(end-start);</span><br><span class="line">    <span class="keyword">var</span> days = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(diff/<span class="number">1000</span>/<span class="number">60</span>/<span class="number">60</span>/<span class="number">24</span>);</span><br><span class="line">    <span class="keyword">return</span> days;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置一个函数能够补全整数的前置零，例如，为3补全两个前置零，得到的结果为 “003”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 思路：先创建一个空数组让后用0拼接成字符串，再与整数拼接，最后截取指定的位数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">prefixZero</span>(<span class="params">integer,digit</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">ZeroStr</span> = <span class="keyword">new</span> <span class="title class_">Array</span>(digit).<span class="title function_">join</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> res = <span class="title class_">ZeroStr</span> + integer.<span class="title function_">toString</span>();</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">slice</span>(-digit)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>封装一个函数，用于判断某个数是否为质数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将该函数构造成了一个记忆函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">prime</span>(<span class="params">num</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!prime.<span class="property">cache</span>) &#123;</span><br><span class="line">        prime.<span class="property">cache</span> = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (prime.<span class="property">cache</span>[num] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> prime.<span class="property">cache</span>[num];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> isPrime = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">2</span>;i&lt;num;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num % i === <span class="number">0</span>) &#123;</span><br><span class="line">            isPrime = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (num === i) &#123;</span><br><span class="line">        isPrime = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (prime.<span class="property">cache</span>[num] = isPrime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现一个isArray()函数，可判断传入的参数是否是数组，实现向下兼容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isArray</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title class_">Array</span>.<span class="property">isArray</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> toString = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>;</span><br><span class="line">    <span class="keyword">return</span> toString.<span class="title function_">call</span>(obj) === <span class="string">&quot;[object Array]&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何在Vue Router 中配置404页面？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在路由配置时 如果path属性的值是通配符 *,那么就能匹配所有的路径</span></span><br><span class="line"><span class="comment">// 因为路由优先级的原因，所以需要将通配符添加在最后</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/list&#x27;</span>,<span class="attr">component</span>: <span class="title class_">List</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>,<span class="attr">component</span>: <span class="title class_">NotFound</span> &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>如何用iframe元素实现无刷新文件上传</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在过去为了不刷新窗口也能上传文件,只能通过iframe元素来做中介,无刷新上传的关键是form元素的target属性需要指向iframe元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">target</span>=<span class="string">&quot;upload&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">name</span>=<span class="string">&quot;upload&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;attach&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建一个<dd>元素，设置该元素的内容为4，并插入到id属性为”third”的<dd>元素之前，要求不能使用第三方类库，只能用DOM方法实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span> <span class="attr">id</span>=<span class="string">&quot;numbers&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span> <span class="attr">id</span>=<span class="string">&quot;third&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dd = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;dd&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> dl = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;numbers&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> third = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;third&quot;</span>);</span><br><span class="line">dd.<span class="property">innerHTML</span> = <span class="number">4</span>;</span><br><span class="line">dl.<span class="title function_">insertBefore</span>(dd,third);</span><br></pre></td></tr></table></figure><p>有一个数组，其值为 [1,[2,[3,4,2],2],5,[6]] ，如何才能输出 [1,2,3,4,2,2,5,6] ？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,[<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>],<span class="number">2</span>],<span class="number">5</span>,[<span class="number">6</span>]];</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">NewArr</span> = arr.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&quot;,&quot;</span>).<span class="title function_">map</span>(<span class="function"><span class="params">value</span> =&gt;</span> +value);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NewArr</span>)<span class="comment">// [1,2,3,4,2,2,5,6]</span></span><br></pre></td></tr></table></figure><p>如何在Vue Router 中切换路由时，保持原先的滚动位置？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当创建一个路由器实例时，可以通过 scrollBehavior()方法来设置滚动的位置</span></span><br><span class="line"><span class="comment">//它有3个参数: to from 和 savedPosition 其中 to 是目标路由对象，from 是来源路由对象</span></span><br><span class="line"><span class="comment">//savedPosition 是原先(即路由切换前)的滚动位置.所以只需要将 scrollBehavior()方法返回 savedPosition就能保持原先的滚动位置</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">    <span class="title function_">scrollBehavior</span>(<span class="params">to,<span class="keyword">from</span>,savedPosition</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> savedPosition;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>用多种方式为下面的<div>元素设置一个名为 ui-border 的 CSS 类</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;info&quot;</span>);</span><br><span class="line"><span class="comment">// 方法一</span></span><br><span class="line">div.<span class="property">className</span> = <span class="string">&quot;ui-border&quot;</span>;</span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="keyword">var</span> list = div.<span class="property">classList</span>;</span><br><span class="line">list.<span class="title function_">add</span>(<span class="string">&quot;ui-border&quot;</span>);</span><br><span class="line"><span class="comment">// 方法三</span></span><br><span class="line">div.<span class="title function_">setAttribute</span>(<span class="string">&quot;class&quot;</span>,<span class="string">&quot;ui-border&quot;</span>);</span><br></pre></td></tr></table></figure><p>下面是一个带重复元素的数组，请将重复的元素只保留一个，多余的全部去除掉</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="string">&quot;1&quot;</span>];</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用集合没有重复元素的特性 实现数组去重</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">NewArr</span> = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NewArr</span>);<span class="comment">// [1,5,4,2,6,&quot;1&quot;]</span></span><br></pre></td></tr></table></figure><p>如何禁用下面 HTML 文档中的提交按钮？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line">btn.<span class="property">disabled</span> = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>用 JavaScript 为下面的<div>元素设置两个 CSS 属性：字体大小和宽度，把字体大小设为18px，宽度设为100px，请用多种方式实现。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;info&quot;</span>);</span><br><span class="line"><span class="comment">// 方法一 style.属性名</span></span><br><span class="line">div.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="string">&quot;18px&quot;</span>;</span><br><span class="line">div.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&quot;100px&quot;</span>;</span><br><span class="line"><span class="comment">// 方法二 cssText</span></span><br><span class="line">div.<span class="property">style</span>.<span class="property">cssText</span> = <span class="string">&quot;font-size:18px;width:100px&quot;</span>;</span><br><span class="line"><span class="comment">// 方法三 setAttribute</span></span><br><span class="line">div.<span class="title function_">setAttribute</span>(<span class="string">&quot;style&quot;</span>,<span class="string">&quot;font-size:18px;width:100px&quot;</span>);</span><br></pre></td></tr></table></figure><p>为数字添加两个方法：add() 和 minus()，分别表示加法和减法，例如，下面的代码相当于表达式 1+2-3</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>).<span class="title function_">add</span>(<span class="number">2</span>).<span class="title function_">minus</span>(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Number</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">add</span> = <span class="keyword">function</span>(<span class="params">num</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span> + num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Number</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">minus</span> = <span class="keyword">function</span>(<span class="params">num</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span> - num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在下面的代码中，子元素 div 的宽度设为了百分数，如何用 JavaScript 获得经过计算后的真正宽度？</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#info</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10%</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">section</span> class=&quot;container&quot;&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> id=&quot;info&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">section</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// window对象提供的一个getComputedStyle()方法</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;info&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> style = <span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(div);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(style.<span class="property">width</span>)<span class="comment">// 10px</span></span><br></pre></td></tr></table></figure><p>如何用 JavaScript 隐藏下面的提交按钮？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line"><span class="comment">// 第一种方法</span></span><br><span class="line">btn.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line"><span class="comment">// 第二种方法</span></span><br><span class="line">btn.<span class="property">style</span>[<span class="string">&quot;visibility&quot;</span>] = <span class="string">&quot;hidden&quot;</span>;</span><br><span class="line"><span class="comment">// 第三种方法</span></span><br><span class="line">btn.<span class="property">style</span>.<span class="property">cssText</span> = <span class="string">&quot;position:absolute;left:-9999px&quot;</span>;</span><br></pre></td></tr></table></figure><p>请封装一个注册事件的函数，要求能够跨浏览器运行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addHandler</span>(<span class="params">element,type,handler</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(element.<span class="property">addEventListener</span>) &#123;</span><br><span class="line">        element.<span class="title function_">addEventListener</span>(type,handler,<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(element.<span class="property">attachEvent</span>) &#123;</span><br><span class="line">        element.<span class="title function_">attachEvent</span>(<span class="string">&#x27;on&#x27;</span>+type,handler);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        element[<span class="string">&#x27;on&#x27;</span>+type] = handler;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找出下面数组中重复出现的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">duplicate</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    arr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">value,index</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr.<span class="title function_">indexOf</span>(value) !== arr.<span class="title function_">lastIndexOf</span>(value) &amp;&amp;                    result.<span class="title function_">indexOf</span>(value) == -<span class="number">1</span>) &#123;</span><br><span class="line">            result.<span class="title function_">push</span>(value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数的返回值是一个数组，数组里的元素即为重复元素</span></span><br></pre></td></tr></table></figure><p>下面是一个按钮，如何在单击类型的事件处理程序中阻止事件传播？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    event = event || <span class="variable language_">window</span>.<span class="property">event</span>;<span class="comment">//兼容处理</span></span><br><span class="line">    event.<span class="title function_">stopPropagation</span>();</span><br><span class="line">    event.<span class="property">cancelBubble</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不使用第三方类库，用DOM方法读取下面复选框中选中的值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">checked</span> /&gt;</span>红色<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> <span class="attr">checked</span> /&gt;</span>白色<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span> /&gt;</span>黑色<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = <span class="variable language_">document</span>.<span class="title function_">getElementByName</span>(<span class="string">&quot;color&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> result = [];</span><br><span class="line">colors = [].<span class="property">slice</span>.<span class="title function_">call</span>(colors)<span class="comment">//将类数组对象转换为数组</span></span><br><span class="line">colors.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">element,key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(element.<span class="property">checked</span>) &#123;</span><br><span class="line">        result.<span class="title function_">push</span>(element.<span class="property">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>HTML5新增了FileReader对象，如何利用这个对象来读取下面上传按钮中选择的文件？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;upload&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> upload = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;upload&quot;</span>);</span><br><span class="line">upload.<span class="title function_">addEventListener</span>(<span class="string">&quot;change&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> file = <span class="variable language_">this</span>.<span class="property">files</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">    reader.<span class="title function_">readAsDataURL</span>(file);</span><br><span class="line">    reader.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">result</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>有一个数组，它的元素都是数字，找出这个数组中的最大差值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 apply 间接调用 Math 对象的max()和min()方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">difference</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> max = <span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>,arr);</span><br><span class="line">    <span class="keyword">var</span> min = <span class="title class_">Math</span>.<span class="property">min</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>,arr);</span><br><span class="line">    <span class="keyword">return</span> max - min;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是两个数组，求出这两个数组的交集</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">intersection</span>(<span class="params">arr1,arr2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr1.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">value,index</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr2.<span class="title function_">indexOf</span>(value) &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用多种方式移除下面选择框(Select元素)中的选项(Option元素)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;names&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>strick<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>freedom<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>jane<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span>&gt;</span>ping<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;names&quot;</span>)</span><br><span class="line"><span class="comment">// 移除全部</span></span><br><span class="line">names.<span class="property">options</span>.<span class="property">length</span> = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 移除第一个</span></span><br><span class="line"><span class="comment">// 1.</span></span><br><span class="line">names.<span class="title function_">removeChild</span>(names.<span class="property">firstElementChild</span>);</span><br><span class="line"><span class="comment">// 2.</span></span><br><span class="line">names.<span class="title function_">remove</span>(<span class="number">0</span>)</span><br><span class="line"><span class="comment">// 3.</span></span><br><span class="line">names.<span class="property">options</span>[<span class="number">0</span>] = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>请解释 JSONP 的工作原理，并用代码描述其过程</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JSONP是一种借助&lt;script&gt;元素实现跨域的技术，它没有使用XHR对象，之所以能够实现跨域，主要是因为&lt;script&gt;元素有以下两个特点</span></span><br><span class="line"><span class="comment">// (1).它的 src 属性能够访问任何 URL 的资源，不会受同源策略的限制</span></span><br><span class="line"><span class="comment">// (2).如果访问的资源包含 JavaScript 代码，那么在下载后会自动执行</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JSONP就是基于以上两点，再与服务器配合来实现跨域请求的，它的执行步骤可以分为以下6步</span></span><br><span class="line"><span class="comment">// (1).定义一个回调函数</span></span><br><span class="line"><span class="comment">// (2).用 DOM 方法动态创建一个&lt;script&gt;元素</span></span><br><span class="line"><span class="comment">// (3).指定要请求的 URL，并将回调函数的名称作为一个参数传递过去</span></span><br><span class="line"><span class="comment">// (4).将&lt;script&gt;元素插入到当前文档中，请求开始</span></span><br><span class="line"><span class="comment">// (5).服务器接收传递过来的参数，然后将回调函数和数据以调用的形式输出</span></span><br><span class="line"><span class="comment">// (6).当&lt;script&gt;元素接收到响应中的脚本代码后</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前4步可以参考如下代码</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handle</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;回调函数&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">script.<span class="property">src</span> = <span class="string">&quot;jsonp.php?jsonp=handle&quot;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(srcipt);</span><br></pre></td></tr></table></figure><p>给定两段字符串，检测是否是改变字母顺序而成的字符串，例如，”mena”是打乱”name”中的字母得到的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 其实就是检测它们包含的字母和数量是否相同</span></span><br><span class="line"><span class="comment">// 具体思路就是</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ES6相关</title>
      <link href="/2022/12/05/ES6%E7%9B%B8%E5%85%B3/"/>
      <url>/2022/12/05/ES6%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h4 id="let"><a href="#let" class="headerlink" title="let"></a>let</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.变量不能重复声明</span></span><br><span class="line"><span class="comment">// 2.产生块级作用域</span></span><br><span class="line"><span class="comment">// 3.不存在变量提升</span></span><br><span class="line"><span class="comment">// 4.不影响作用域链</span></span><br></pre></td></tr></table></figure><h4 id="const"><a href="#const" class="headerlink" title="const"></a>const</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.一定要赋初始值</span></span><br><span class="line"><span class="comment">// 2.一般常量使用大写(潜规则)</span></span><br><span class="line"><span class="comment">// 3.常量的值不能修改</span></span><br><span class="line"><span class="comment">// 4.产生块级作用域</span></span><br><span class="line"><span class="comment">// 5.对于数组和对象的元素修改,不算做对常量的修改,不会报错</span></span><br></pre></td></tr></table></figure><h4 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义:按照一定模式从数组和对象中提取值,并且对变量进行赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.数组的解构</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable constant_">F4</span> = [<span class="string">&#x27;小沈阳&#x27;</span>,<span class="string">&#x27;刘能&#x27;</span>,<span class="string">&#x27;赵四&#x27;</span>,<span class="string">&#x27;宋小宝&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> [xiao,liu,zhao,song] = <span class="variable constant_">F4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.对象的解构</span></span><br><span class="line"><span class="keyword">const</span> zhao = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;赵本山&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="string">&#x27;unknow&#x27;</span>,</span><br><span class="line">    <span class="attr">skill</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以演小品&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;name,age,skill&#125; = zhao</span><br><span class="line"><span class="title function_">skill</span>()</span><br></pre></td></tr></table></figure><h4 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模板字符串使用 `` 来定义,内容中可以直接出现换行符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> character = <span class="string">&#x27;战场原黑仪&#x27;</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`我永远喜欢<span class="subst">$&#123;character&#125;</span>`</span></span><br></pre></td></tr></table></figure><h4 id="简化对象写法"><a href="#简化对象写法" class="headerlink" title="简化对象写法"></a>简化对象写法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 允许在大括号里面,直接写入变量和函数,作为对象的属性和方法</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;makise&#x27;</span></span><br><span class="line"><span class="keyword">let</span> speak = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是助手&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> character = &#123;</span><br><span class="line">    <span class="attr">name</span>: name,</span><br><span class="line">    <span class="attr">speak</span>: speak,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等价于下面的代码</span></span><br><span class="line"><span class="keyword">const</span> character = &#123;</span><br><span class="line">    name,</span><br><span class="line">    speak,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.this是静态的,this始终指向函数声明时所在作用域下的this的值</span></span><br><span class="line"><span class="comment">// 2.不能作为构造实例化对象</span></span><br><span class="line"><span class="comment">// 3.不能使用 arguments 对象</span></span><br><span class="line"><span class="comment">// 4.箭头函数的简写</span></span><br><span class="line"><span class="comment">// (1)省略小括号,当形参有且只有一个的时候</span></span><br><span class="line"><span class="comment">// (2)省略花括号,当代码体只有一条语句的时候,此时 return 必须省略</span></span><br></pre></td></tr></table></figure><h4 id="函数参数的默认值设置"><a href="#函数参数的默认值设置" class="headerlink" title="函数参数的默认值设置"></a>函数参数的默认值设置</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">connect</span>(<span class="params">a,b,c=<span class="number">10</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于获取函数的实参,用来代替arguments</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">date</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(args)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">date</span>(<span class="string">&#x27;makise&#x27;</span>,<span class="string">&#x27;madoka&#x27;</span>,<span class="string">&#x27;maki&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ... 扩展运算符能将 数组 转换为逗号分隔的 参数序列</span></span><br><span class="line"><span class="keyword">const</span> suki = [<span class="string">&#x27;gal&#x27;</span>,<span class="string">&#x27;act&#x27;</span>,<span class="string">&#x27;manga&#x27;</span>]</span><br><span class="line"><span class="comment">// 以下等号左右等价</span></span><br><span class="line">...suki = <span class="string">&#x27;gal&#x27;</span>,<span class="string">&#x27;act&#x27;</span>,<span class="string">&#x27;manga&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 迭代器(Iterator)是一种接口(其实就是对象里的一个属性),为各种不同的数据结构提供统一的访问机制</span></span><br><span class="line"><span class="comment">// 任何数据结构只要部署Iterator接口,就可以完成遍历操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 工作原理</span></span><br><span class="line"><span class="comment">//  (1) 创建一个指针对象,指向当前数据结构的起始位置</span></span><br><span class="line"><span class="comment">//  (2) 第一次调用对象的next方法,指针自动指向数据结构的第一个成员</span></span><br><span class="line"><span class="comment">//  (3) 接下来不断调用next方法,指针一直往后移动,直到指向最后一个成员</span></span><br><span class="line"><span class="comment">//  (4) 每调用next方法返回一个包含 value 和 done 属性的对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">F4</span> = [<span class="string">&#x27;唐僧&#x27;</span>,<span class="string">&#x27;孙悟空&#x27;</span>,<span class="string">&#x27;猪八戒&#x27;</span>,<span class="string">&#x27;沙僧&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> iterator = <span class="variable constant_">F4</span>[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()</span><br><span class="line">iterator.<span class="title function_">next</span>()   <span class="comment">// 唐僧</span></span><br><span class="line">iterator.<span class="title function_">next</span>()   <span class="comment">// 孙悟空</span></span><br><span class="line">iterator.<span class="title function_">next</span>()   <span class="comment">// 猪八戒</span></span><br><span class="line">iterator.<span class="title function_">next</span>()   <span class="comment">// 沙僧</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for of 遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> <span class="variable constant_">F4</span>) &#123;</span><br><span class="line">    consle.<span class="title function_">log</span>(v)<span class="comment">// 唐僧 孙悟空 猪八戒 沙僧</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="迭代器自定义遍历对象"><a href="#迭代器自定义遍历对象" class="headerlink" title="迭代器自定义遍历对象"></a>迭代器自定义遍历对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> group = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;sox&#x27;</span>,</span><br><span class="line">    <span class="attr">students</span>: [</span><br><span class="line">        <span class="string">&#x27;madoka&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;makise&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;hanekawa&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;shinobu&#x27;</span></span><br><span class="line">    ],</span><br><span class="line">    [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">        <span class="comment">// 索引变量</span></span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">        <span class="comment">// 保存this</span></span><br><span class="line">        <span class="keyword">let</span> _this = <span class="variable language_">this</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">next</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (index &lt; _this.<span class="property">students</span>.<span class="property">length</span>) &#123;</span><br><span class="line">                    <span class="keyword">const</span> result = &#123; <span class="attr">value</span>:_this.<span class="property">students</span>[index],<span class="attr">done</span>:<span class="literal">false</span> &#125;</span><br><span class="line">                    <span class="comment">//下标自增</span></span><br><span class="line">                    index++</span><br><span class="line">                    <span class="comment">//返回结果</span></span><br><span class="line">                    <span class="keyword">return</span> result</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123; <span class="attr">value</span>:<span class="literal">undefined</span>,<span class="attr">done</span>:<span class="literal">true</span> &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历这个对象// madoka&lt;--- 打印结果</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> group) &#123;  <span class="comment">// makise</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v)  <span class="comment">// hanekawa</span></span><br><span class="line">&#125;    <span class="comment">// shinobu</span></span><br></pre></td></tr></table></figure><h4 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成器其实就是一个特殊的函数</span></span><br><span class="line"><span class="keyword">function</span> *<span class="title function_">gen</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Step1&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;一只没有耳朵&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Step2&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;一只没有尾巴&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Step3&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;真奇怪&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Step4&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>())<span class="comment">// &#123; value: &#x27;一只没有耳朵&#x27;, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>())<span class="comment">// &#123; value: &#x27;一只没有尾巴&#x27;, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>())<span class="comment">// &#123; value: &#x27;真奇怪&#x27;, done:f alse &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>())<span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><h4 id="生成器函数参数"><a href="#生成器函数参数" class="headerlink" title="生成器函数参数"></a>生成器函数参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> *<span class="title function_">gen</span>(<span class="params">arg</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg)</span><br><span class="line">    <span class="keyword">let</span> one = <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(one)</span><br><span class="line">    <span class="keyword">let</span> two = <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(two)</span><br><span class="line">    <span class="keyword">let</span> three = <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(three)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行获取迭代器对象</span></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>())</span><br><span class="line"><span class="comment">// next方法可以传入实参</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">&#x27;B&#x27;</span>))<span class="comment">// 第二个next()传入的参数将作为第一个yield的返回值,此处由one接收</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">&#x27;C&#x27;</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">&#x27;D&#x27;</span>))</span><br></pre></td></tr></table></figure><h4 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例化 Promise 对象</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> data = <span class="string">&#x27;数据库中的用户数据&#x27;</span></span><br><span class="line">        <span class="title function_">resolve</span>(data)</span><br><span class="line">        <span class="keyword">let</span> err = <span class="string">&#x27;数据读取失败&#x27;</span></span><br><span class="line">        <span class="title function_">reject</span>(err)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 promise 对象的 then 方法</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;),<span class="keyword">function</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reason)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="集合-Set"><a href="#集合-Set" class="headerlink" title="集合(Set)"></a>集合(Set)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 集合的声明</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;makise&#x27;</span>,<span class="string">&#x27;madoka&#x27;</span>,<span class="string">&#x27;hanekawa&#x27;</span>,<span class="string">&#x27;madoka&#x27;</span>])  <span class="comment">// 集合会自动去重</span></span><br><span class="line"><span class="comment">// 元素个数</span></span><br><span class="line">s.<span class="property">size</span></span><br><span class="line"><span class="comment">// 添加新的元素</span></span><br><span class="line">s.<span class="title function_">add</span>(<span class="string">&#x27;shinobu&#x27;</span>)</span><br><span class="line"><span class="comment">// 删除元素</span></span><br><span class="line">s.<span class="title function_">delete</span>(<span class="string">&#x27;madoka&#x27;</span>)</span><br><span class="line"><span class="comment">// 检测</span></span><br><span class="line">s.<span class="title function_">has</span>(<span class="string">&#x27;hanekawa&#x27;</span>)<span class="comment">// 返回值的类型为布尔值</span></span><br><span class="line"><span class="comment">// 清空</span></span><br><span class="line">s.<span class="title function_">clear</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> s) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="集合的实践"><a href="#集合的实践" class="headerlink" title="集合的实践"></a>集合的实践</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line"><span class="comment">// 1.数组去重</span></span><br><span class="line"><span class="keyword">let</span> result = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.交集</span></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">let</span> result = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> s2 = <span class="keyword">new</span> <span class="title class_">Set</span>(arr2)</span><br><span class="line">    <span class="keyword">if</span>(s2.<span class="title function_">has</span>(item)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 简化写法</span></span><br><span class="line"><span class="keyword">let</span> resule = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="keyword">new</span> <span class="title class_">Set</span>(arr2).<span class="title function_">has</span>(item))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.并集</span></span><br><span class="line"><span class="keyword">let</span> union = [...<span class="keyword">new</span> <span class="title class_">Set</span>([...arr,...arr2 ])]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.差集此处diff表示数组 arr 中有而 arr2 中没有的元素</span></span><br><span class="line"><span class="keyword">let</span> diff = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="keyword">new</span> !(<span class="title class_">Set</span>(arr2).<span class="title function_">has</span>(item)))</span><br></pre></td></tr></table></figure><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6提供了 Map 数据结构,它类似于对象,也是键值对的集合,但是&quot;键&quot;的范围不限于字符串,</span></span><br><span class="line"><span class="comment">// 各种类型的值(包括对象)都可以当作键。Map也实现了iterator接口,所以可以使用[扩展运算符]</span></span><br><span class="line"><span class="comment">// 和[for...of...]进行遍历</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明Map</span></span><br><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;羽川翼&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> key = &#123;</span><br><span class="line">    <span class="attr">anime</span>: <span class="string">&#x27;来自深渊&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">m.<span class="title function_">set</span>(key,[<span class="string">&#x27;冒险&#x27;</span>,<span class="string">&#x27;催泪&#x27;</span>,<span class="string">&#x27;黑暗&#x27;</span>])</span><br><span class="line"><span class="comment">// 元素个数</span></span><br><span class="line">m.<span class="property">size</span></span><br><span class="line"><span class="comment">// 删除元素</span></span><br><span class="line">m.<span class="title function_">delete</span>(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="comment">// 获取对应值</span></span><br><span class="line">m.<span class="title function_">get</span>(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="comment">// 清空</span></span><br><span class="line">m.<span class="title function_">clear</span>()</span><br><span class="line"><span class="comment">// Map相当于升级版的字符串</span></span><br></pre></td></tr></table></figure><h4 id="class类"><a href="#class类" class="headerlink" title="class类"></a>class类</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="comment">//构造方法,名字不能修改</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">brand,price</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">brand</span> = brand</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">price</span> = price</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方法必须使用该语法,不能使用 ES5 的对象完整形式</span></span><br><span class="line">    <span class="title function_">call</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以打电话!&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="class静态成员"><a href="#class静态成员" class="headerlink" title="class静态成员"></a>class静态成员</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 静态属性就是指类身上的属性,而不是实例身上的属性</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="comment">//静态属性</span></span><br><span class="line">    <span class="keyword">static</span> name = <span class="string">&#x27;手机&#x27;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">change</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;妹控改变世界&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> nokia = <span class="keyword">new</span> <span class="title class_">Phone</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nokia.<span class="property">name</span>)   <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Phone</span>.<span class="property">name</span>)   <span class="comment">// 手机</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue笔记</title>
      <link href="/2022/12/05/Vue%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/12/05/Vue%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h3><p>功能:用于解析<code>标签体内容</code></p><p>用法:    且可以直接读取到data中的属性</p><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><p>单向绑定[ v-bind ]:数据只能从data流向页面,如input表单</p><p>双向绑定[ v-model ]:数据可以双向流通</p><p>使用方法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;name&quot;</span>&gt;</span> <span class="comment">&lt;!-- 单向绑定普通写法 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model:value</span>=<span class="string">&quot;name&quot;</span>&gt;</span>  <span class="comment">&lt;!-- 双向绑定普通写法 --&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;name&quot;</span><span class="attr">-</span>&gt;</span>  <span class="comment">&lt;!-- 单向绑定简写 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span><span class="attr">-</span>&gt;</span>  <span class="comment">&lt;!-- 双向绑定简写 --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Object-defineproperty"><a href="#Object-defineproperty" class="headerlink" title="Object.defineproperty"></a>Object.defineproperty</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineproperty</span>(person,<span class="string">&#x27;age&#x27;</span>,&#123;   <span class="comment">// 给person对象添加一个名为 age 的属性,且可以被遍历</span></span><br><span class="line"><span class="attr">value</span>:<span class="number">18</span>,</span><br><span class="line">  <span class="attr">enumerable</span>:<span class="literal">true</span>,<span class="comment">//属性是否可以枚举</span></span><br><span class="line">    <span class="attr">writable</span>:<span class="literal">true</span>,<span class="comment">//属性是否可以被修改</span></span><br><span class="line">    <span class="attr">configurable</span>:<span class="literal">true</span><span class="comment">//属性是否可以被删除</span></span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineproperty</span>(person,<span class="string">&#x27;age&#x27;</span>,&#123;</span><br><span class="line">    <span class="comment">//当有人读取person的age属性时,get函数就会被调用,且返回值就是age的值</span></span><br><span class="line"><span class="title function_">get</span>(<span class="params"> </span>) &#123;     </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;age属性被读取了&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//当有人修改person的age属性时,set函数就会被调用,且会收到修改的值</span></span><br><span class="line"> <span class="title function_">set</span>(<span class="params"> </span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;age属性被读取了&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用v-on:xxx 或 @xxx 绑定事件,其中xxx是事件名 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;ShowInfo&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button.</span>&gt;</span> <span class="comment">&lt;!-- 不传参 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;ShowInfo( $event,233 )&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button.</span>&gt;</span> <span class="comment">&lt;!-- 传参,也可以只传一个event --&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;<span class="comment">// 如果ShowInfo方法写为箭头式函数，则event指向window</span></span><br><span class="line">  <span class="title class_">ShowInfo</span>(event,num) &#123;   <span class="comment">// 此处的event可以是任意变量名,使用num接收233</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;madoka&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>event.target</code>：获取button标签</p><p><code>event.target.innerText</code>：获取button标签内的文字</p><p><code>event</code>：指Vue实例对象，即vm</p><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;xxx&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- [方法1] 在click后加上 .prevent 可阻止标签的默认行为,比如 a标签的跳转 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        在click后加上 .stop 可阻止事件冒泡 --&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">showInfo</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        e.<span class="title function_">preventDefault</span>()</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;madoka&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [方法2] 在showInfo方法里加上 e.preventDefault() 也可以阻止标签的默认行为</span></span><br><span class="line"><span class="comment">//        在showInfo方法里加上 e.stopPropagation() 也可以阻止事件冒泡</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Vue中的事件修饰符"><a href="#Vue中的事件修饰符" class="headerlink" title="Vue中的事件修饰符"></a>Vue中的事件修饰符</h3><p>1.prevent    阻止默认事件</p><p>2.stop    阻止事件冒泡</p><p>3.once    事件只触发一次</p><p>4.capture    使用事件的捕获模式</p><p>5.self    只有event.target是当前操作的元素才触发事件</p><p>6.passive    事件的默认行为立即执行，无需等待事件回调执行完毕</p><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><p>Vue中常用的按键别名：</p><p>回车 =&gt; enter</p><p>删除 =&gt; delete</p><p>退出 =&gt; esc</p><p>空格 =&gt; space</p><p>换行 =&gt; tab</p><p>上 =&gt;up</p><p>下 =&gt; dwon</p><p>左 =&gt; left</p><p>右 =&gt; right</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;按下回车提示输入&quot;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 可以给键盘事件加上enter修饰,使其在按下enter后再执行showInfo函数 --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="监视属性"><a href="#监视属性" class="headerlink" title="监视属性"></a>监视属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="attr">info</span>: &#123;</span><br><span class="line">        <span class="attr">immediate</span>:<span class="literal">true</span>  <span class="comment">//初始化时让handler调用一下</span></span><br><span class="line">        <span class="title function_">handler</span>(<span class="params">newValue,oldValue</span>) &#123;<span class="comment">//当info被修改时,handler就会被调用</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;info被修改了&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 监视多级结构中某个属性的变化</span></span><br><span class="line">    <span class="string">&#x27;numbers.a&#x27;</span>:&#123;</span><br><span class="line">        <span class="title function_">handler</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a被修改了&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 监视多级结构中所有属性的变化</span></span><br><span class="line">    <span class="attr">numbers</span>:&#123;</span><br><span class="line">        <span class="attr">deep</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="title function_">handler</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;numbers被修改了&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 配置deep:true可以检测对象内部值的改变,但Vue提供的watch默认不可以</span></span><br></pre></td></tr></table></figure><h3 id="绑定class样式"><a href="#绑定class样式" class="headerlink" title="绑定class样式"></a>绑定class样式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;mood&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;changeMood&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 绑定class样式的字符串写法   适用于: 样式的类名不确定，需要动态指定 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classArr&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 绑定class样式的数组写法   适用于: 要绑定的样式个数不确定，名字也不确定 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;clasObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 绑定class样式的对象写法   适用于: 要绑定的样式个数确定,名字也确定,但要动态决定用不用 --&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;羽川翼&#x27;</span>,</span><br><span class="line">        <span class="attr">classArr</span>:[<span class="string">&#x27;shadow&#x27;</span>,<span class="string">&#x27;border&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>],</span><br><span class="line">        <span class="attr">classObj</span>:&#123;</span><br><span class="line">        <span class="attr">shadow</span>:<span class="literal">false</span>,</span><br><span class="line">        <span class="attr">border</span>:<span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="绑定style样式"><a href="#绑定style样式" class="headerlink" title="绑定style样式"></a>绑定style样式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 绑定style样式 对象写法 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleArr&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 绑定style样式 数组写法 --&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;羽川翼&#x27;</span>,</span><br><span class="line">        <span class="attr">styleObj</span>:&#123;</span><br><span class="line">            <span class="attr">fontSize</span>:<span class="string">&#x27;16px&#x27;</span>,</span><br><span class="line">            <span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">styleArr</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">fontSize</span>:<span class="string">&#x27;16px&#x27;</span>,</span><br><span class="line">                <span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">backgroundColor</span>:<span class="string">&#x27;orange&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 两个参数接收 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(person,index) in persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;person.name&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 一个参数接收 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;person in persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;person.id&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;person.name&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">persons</span>:[</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="string">&#x27;1&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;madoka&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="string">&#x27;2&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;makise&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="string">&#x27;3&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;hanekawa&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="key的作用与原理"><a href="#key的作用与原理" class="headerlink" title="key的作用与原理"></a>key的作用与原理</h3><p>1.虚拟DOM中key的作用:</p><p>key是虚拟DOM对象的标识，当数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】，</p><p>随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：</p><p>2.对比规则:</p><p>(1).旧虚拟DOM中找到了与新虚拟DOM相同的key:</p><p>若虚拟DOM中内容不变，直接使用之前的真实DOM</p><p>若虚拟DOM中内容改变，则生成新的真实DOM，随后替换掉页面中之前的真实DOM</p><p>(2).旧虚拟DOM中未找到与新虚拟DOM相同的key:</p><p>创建新的真实DOM，随后渲染到页面</p><p>3.使用index作为key可能会引发的问题:</p><p>1.若对数据进行：逆序添加，逆序删除等破坏顺序操作：</p><p>会产生没有必要的真实DOM更新  ==&gt;  界面效果没问题，但效率低</p><p>2.如果结构中还包含输入类的DOM:</p><p>会产生错误DOM更新  ==&gt;  界面有问题</p><h3 id="列表过滤"><a href="#列表过滤" class="headerlink" title="列表过滤"></a>列表过滤</h3><p>computed属性实现搜索栏功能</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入名字&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyword&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;p in filPersons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;p.id&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;-&#123;&#123;p.sex&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">keyword</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">persons</span>:[</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="string">&#x27;1&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;马冬梅&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="string">&#x27;2&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;周冬雨&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="string">&#x27;3&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;周杰伦&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="string">&#x27;4&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;温兆伦&#x27;</span>,<span class="attr">age</span>:<span class="number">21</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">filPersons</span>:[]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">computed</span>:&#123;</span><br><span class="line">        <span class="title function_">filPersons</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">persons</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">p</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> p.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="variable language_">this</span>.<span class="property">keyword</span>) !== -<span class="number">1</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h3><p>computed属性实现基本排序功能</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入名字&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyword&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortTyoe = 2&quot;</span>&gt;</span>年龄升序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortTyoe = 1&quot;</span>&gt;</span>年龄降序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortTyoe = 0&quot;</span>&gt;</span>原顺序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p in filPersons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;p.id&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;-&#123;&#123;p.sex&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">keyword</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">sortType</span>:<span class="number">0</span>,<span class="comment">// 0原顺序 1降序 2升序</span></span><br><span class="line">        <span class="attr">persons</span>:[</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="string">&#x27;1&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;马冬梅&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="string">&#x27;2&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;周冬雨&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="string">&#x27;3&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;周杰伦&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="string">&#x27;4&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;温兆伦&#x27;</span>,<span class="attr">age</span>:<span class="number">21</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">filPersons</span>:[]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">computed</span>:&#123;</span><br><span class="line">        <span class="title function_">filPersons</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> arr = <span class="variable language_">this</span>.<span class="property">persons</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">p</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> p.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="variable language_">this</span>.<span class="property">keyword</span>) !== -<span class="number">1</span></span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">sortType</span>) &#123;</span><br><span class="line">                arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">p1,p2</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">sortType</span> === <span class="number">1</span> ? p2.<span class="property">age</span>-p1.<span class="property">age</span> : p1.<span class="property">age</span>-p2.<span class="property">age</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> arr</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)简单模拟<span class="title class_">Vue</span>监测数据-对象</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;羽川翼&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个监视的实例对象，用于监视data中属性的变化</span></span><br><span class="line"><span class="keyword">const</span> obs = <span class="keyword">new</span> <span class="title class_">Observer</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备一个vm实例对象</span></span><br><span class="line"><span class="keyword">let</span> vm = &#123;&#125;</span><br><span class="line">vm.<span class="property">_data</span> = data = obs</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Observer</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="comment">//汇总对象中所有的属性形成一个数组</span></span><br><span class="line">    <span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)</span><br><span class="line">    <span class="comment">//遍历给每个属性添加get()与set()</span></span><br><span class="line">    keys.<span class="title function_">forEach</span>(<span class="function">(<span class="params">k</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">this</span>,k,&#123;</span><br><span class="line">            <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> obj[k]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">set</span>(<span class="params">val</span>) &#123;</span><br><span class="line">                obj[k] = val</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Vue监视数据的原理"><a href="#Vue监视数据的原理" class="headerlink" title="Vue监视数据的原理"></a>Vue监视数据的原理</h3><p>1.vue会监视data中所有层次的数据</p><p>2.如何监测对象中的数据？</p><p>通过setter实现监视，且要在new Vue时就要传入要监测的数据</p><p>(1).对象中后追加的属性，Vue默认不做响应式处理</p><p>(2).如需给后添加的属性做响应式处理，请使用如下API：</p><p>Vue.set(target，propertyName/index，value)    或</p><p>vm.$set(target，propertyName/index，value)</p><p>3.如何监测数组中的数据？</p><p>通过包裹数组数组更新元素的方法实现，本质就是做了两件事：</p><p>(1).调用原生对应的方法对数组进行更新</p><p>(2).重新解析模板，进而更新页面</p><p>4.在Vue修改数组中的某个元素一定要用如下方法:</p><p>1.使用这些API：push()，pop()，shift()，unshift()，splice()，sort()，reverse()</p><p>2.Vue.set()  或  vm.$set()</p><p>特别注意：Vue.set()  和  vm.$set()  不能给vm或vm的根数据对象(即data)添加属性</p><h3 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h3><p>beforeCreate</p><p>此时==无法==通过vm(实例对象)访问到data中的数据，methods中的方法，数据代理和数据监测未开始</p><p>created</p><p>此时==可以==通过vm(实例对象)访问到data中的数据，methods中的方法，数据代理和数据监测已经开始</p><p>beforeMount</p><p>此时页面呈现的是==未经Vue编译==的DOM结构，所有对DOM的操作，最终都不奏效</p><p>mounted</p><p>此时页面呈现的是==经过Vue编译==的DOM，对DOM的操作均有效(尽量避免)，至此初始化过程结束，一般在此进行：开启定时器，发送网络请求，订阅消息，绑定自定义事件，等==初始化操作==</p><p>beforeUpdate</p><p>在数据更新前被调用，此时数据是==新的==，但页面是==旧的==，即页面没有和数据保持同步</p><p>updated</p><p>此时数据是==新的==，页面也是==新的==，即页面和数据保持同步</p><p>beforeDestroy</p><p>此时vm中所有的：data，methods，指令等等，都处于可用状态，马上要执行销毁过程，一般在此阶段：关闭定时器，取消订阅消息，解绑自定义事件等==收尾操作==</p><p>destroyed</p><p>一般不用</p><h3 id="关于Vuecomponent"><a href="#关于Vuecomponent" class="headerlink" title="关于Vuecomponent"></a>关于Vuecomponent</h3><p>1.school组件本质是一个名为Vuecomponent的构造函数，且不是程序员定义的，是Vue.extend生成的</p><p>2.我们只需要<school /.>或<school.>&lt;/school.&gt;,Vue解析时会帮我们创建school组件的实例对象，即Vue帮我们执行的：new VueComponent(options)</p><p>3.特别注意：每次调用Vue.extend，返回的都是一个全新的VueComponent!</p><p>4.关于this指向：</p><p>(1).组件配置中：</p><p>data函数，methods中的函数，watch中的函数，computed中的函数它们的this均是[VueComponent实例对象]</p><p>(2).new Vue(options)配置中：</p><p>data函数，methods中的函数，watch中的函数，computed中的函数  它们的this均是[Vue实例对象]</p><p>5.VueComponent的实例对象，以后简称vc(也可以称之为：组件实例对象)，Vue的实例对象，以后简称vm</p><p>一个重要的内置关系：VueComponent.prototype.<strong> proto </strong>  ===  Vue.prototype</p><p>作用：让组件实例对象(vc)可以访问到Vue原型上的属性，方法</p><h4 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">ref</span>=<span class="string">&quot;btn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showDOM&quot;</span>&gt;</span>点我输出DOM元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">method</span>: &#123;</span><br><span class="line">    <span class="title function_">showDOM</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">btn</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 还可以使用ref获取子组件的数据与方法 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 父组件 parent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">child</span> <span class="attr">ref</span>=<span class="string">&quot;Mildware&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">components</span>: &#123; child &#125;,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">&#x27;北京&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    updateCity () &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">child</span>.<span class="title function_">update</span>(<span class="variable language_">this</span>.<span class="property">msg</span>) </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件获取子组件的数据</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">Mildware</span>.<span class="property">Msg</span></span><br><span class="line"><span class="comment">// 父组件获取子组件的方法</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$Refs</span>.<span class="property">Mildware</span>.<span class="title function_">update</span>()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件 child.vue</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="title class_">Msg</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="title function_">update</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">Msg</span> = msg</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="props属性"><a href="#props属性" class="headerlink" title="props属性"></a>props属性</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- App.vue 父组件 父传子 --&gt;</span>        </span><br><span class="line"><span class="tag">&lt;<span class="name">Student</span> <span class="attr">name</span>=<span class="string">&quot;madoka&quot;</span> <span class="attr">sex</span>=<span class="string">&quot;女&quot;</span> <span class="attr">:age</span>=<span class="string">&quot;18&quot;</span> /&gt;</span> </span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Student.vue 子组件 子接收</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//简单声明接收</span></span><br><span class="line"><span class="attr">props</span>:[<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收的同时对数据进行类型限制</span></span><br><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="title class_">Number</span>,</span><br><span class="line">    <span class="attr">sex</span>:<span class="title class_">String</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收的同时对数据: 进行类型限制+默认值的指定+必要性的限制</span></span><br><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="title class_">String</span>,</span><br><span class="line">        <span class="attr">required</span>:<span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">age</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="title class_">Number</span>,</span><br><span class="line">        <span class="attr">default</span>:<span class="number">99</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">sex</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="title class_">String</span>,</span><br><span class="line">        <span class="attr">required</span>:<span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="mixin混入"><a href="#mixin混入" class="headerlink" title="mixin混入"></a>mixin混入</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基本思想:将两个组件中相同的js代码抽离到一个新的 mixin.js 文件中,再在两个组件中配置并导入使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// mixin.js</span></span><br><span class="line"><span class="keyword">const</span> mixin = &#123;</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="title function_">showName</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//组件1 Student.vue</span></span><br><span class="line"><span class="keyword">import</span> &#123;mixin&#125; <span class="keyword">from</span> <span class="string">&#x27;../mixin&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;Student&#x27;</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;makise&#x27;</span></span><br><span class="line">            <span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//在这里配置</span></span><br><span class="line">    <span class="attr">mixins</span>:[mixin]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//组件2 School.vue</span></span><br><span class="line"><span class="keyword">import</span> &#123;mixin&#125; <span class="keyword">from</span> <span class="string">&#x27;../mixin&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;Student&#x27;</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;tokyo&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//在这里配置</span></span><br><span class="line">    <span class="attr">mixins</span>:[mixin]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="filters属性"><a href="#filters属性" class="headerlink" title="filters属性"></a>filters属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在组件中定义</span></span><br><span class="line"><span class="attr">filters</span>:&#123;</span><br><span class="line">    <span class="title class_">RmbData</span>(value) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;$&#x27;</span>+value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 如何使用 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg | RmbData&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="this-nextTick"><a href="#this-nextTick" class="headerlink" title="this.$nextTick"></a>this.$nextTick</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用一个示例了解下关于Vue中的DOM更新以及nextTick的作用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;msgDiv&quot;</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;msg1&quot;</span>&gt;</span>Message got outside $nextTick: &#123;&#123;msg1&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;msg2&quot;</span>&gt;</span>Message got inside $nextTick: &#123;&#123;msg2&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;msg3&quot;</span>&gt;</span>Message got outside $nextTick: &#123;&#123;msg3&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeMsg&quot;</span>&gt;</span></span><br><span class="line">    Change the Message</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;.app&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;Hello Vue.&#x27;</span>,</span><br><span class="line">    <span class="attr">msg1</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">msg2</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">msg3</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">changeMsg</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">msg</span> = <span class="string">&quot;Hello world.&quot;</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">msg1</span> = <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">msgDiv</span>.<span class="property">innerHTML</span></span><br><span class="line">      <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">msg2</span> = <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">msgDiv</span>.<span class="property">innerHTML</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">msg3</span> = <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">msgDiv</span>.<span class="property">innerHTML</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以看到: msg1和msg3显示的内容还是变换之前的，而msg2显示的内容是变换之后的。其根本原因是因为Vue中DOM更新是异步的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//this.$nextTick()将回调延迟到下次 DOM 更新循环之后执行。在修改数据之后立即使用它，然后等待 DOM 更新</span></span><br></pre></td></tr></table></figure><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个名为 plugins.js 文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// plugins.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">install</span>(<span class="params">Vue</span>) &#123;</span><br><span class="line">        <span class="comment">//全局过滤器</span></span><br><span class="line">        <span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;Slice&#x27;</span>,<span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> value.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">4</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//定义全局指令</span></span><br><span class="line">        <span class="title class_">Vue</span>.<span class="title function_">directive</span>()</span><br><span class="line">        <span class="comment">//定义混入</span></span><br><span class="line">        <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//给Vue原型上添加一个方法(添加后 vm 和 vc就都可以使用了</span></span><br><span class="line">        <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hello</span> = <span class="function">() =&gt;</span> &#123;<span class="title function_">alert</span>(<span class="string">&#x27;你好&#x27;</span>)&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 main.js 中配置引入</span></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入插件</span></span><br><span class="line"><span class="keyword">import</span> plugins <span class="keyword">from</span> <span class="string">&#x27;./plugins&#x27;</span></span><br><span class="line"><span class="comment">//使用插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(plugins)</span><br></pre></td></tr></table></figure><h4 id="组件的自定义事件"><a href="#组件的自定义事件" class="headerlink" title="组件的自定义事件"></a>组件的自定义事件</h4><p>一种组件间通信的方式，适用于：子组件  ===&gt;  父组件</p><p>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（事件的回调在A中）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 绑定自定义事件 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第一种方式，在父组件中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Demo</span> @<span class="attr">thing</span>=<span class="string">&quot;test&quot;</span> /&gt;</span> 或 <span class="tag">&lt;<span class="name">Demo</span> <span class="attr">v-on:thing</span>=<span class="string">&quot;test&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第二种方式，在父组件中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Demo</span> <span class="attr">ref</span>=<span class="string">&quot;demo&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">test</span>(<span class="params">数据</span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">demo</span>.$on(<span class="string">&#x27;thing&#x27;</span>,<span class="variable language_">this</span>.<span class="property">test</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">demo</span>.$on(<span class="string">&#x27;thing&#x27;</span>,<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//触发自定义事件(在子组件中):</span></span><br><span class="line"><span class="variable language_">this</span>.$emit(<span class="string">&#x27;thing&#x27;</span>,数据)</span><br><span class="line"></span><br><span class="line"><span class="comment">//解绑自定义事件(在子组件中):</span></span><br><span class="line"><span class="variable language_">this</span>.$off(<span class="string">&#x27;thing&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="Vuex基础"><a href="#Vuex基础" class="headerlink" title="Vuex基础"></a>Vuex基础</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//store.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//引用Vuex</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="comment">//相应组件中加的动作</span></span><br><span class="line">    <span class="title function_">increase</span>(<span class="params">context,value</span>) &#123;</span><br><span class="line">        context.<span class="title function_">commit</span>(<span class="string">&#x27;INCREASE&#x27;</span>,value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="title function_">INCREASE</span>(<span class="params">state,value</span>) &#123;</span><br><span class="line">        state.<span class="property">sum</span> += value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    <span class="attr">sum</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//组件中</span></span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">n</span>:<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;increase&#x27;</span>,<span class="variable language_">this</span>.<span class="property">n</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//组件中读取vuex中的数据</span></span><br><span class="line">$store.<span class="property">state</span>.<span class="property">sum</span></span><br><span class="line"><span class="comment">//组件中修改vuex中的数据</span></span><br><span class="line">$store.<span class="title function_">dispatch</span>(<span class="string">&#x27;action中的方法名&#x27;</span>,数据) 或 $store.<span class="title function_">commit</span>(<span class="string">&#x27;mutations中的方法名&#x27;</span>,数据)</span><br><span class="line"><span class="comment">//tips: 若没有网络请求或其它业务逻辑,组件中也可以越过actions,即不写dispatch,直接编写commit</span></span><br></pre></td></tr></table></figure><h4 id="Vuex之getters"><a href="#Vuex之getters" class="headerlink" title="Vuex之getters"></a>Vuex之getters</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下列代码在store.js中加入  与 actions mutations state 并列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//准备 getters  用于将state中的数据进行加工</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">    <span class="title function_">bigSum</span>(<span class="params">state</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">sum</span>*<span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//并在 new Vuex.Store 中配置</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state,</span><br><span class="line">    getters,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//组件中引用数据</span></span><br><span class="line">$store.<span class="property">getters</span>.<span class="property">bigSum</span></span><br></pre></td></tr></table></figure><h4 id="Vuex之mapState与mapGetters"><a href="#Vuex之mapState与mapGetters" class="headerlink" title="Vuex之mapState与mapGetters"></a>Vuex之mapState与mapGetters</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 store.js 中的state</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    <span class="attr">sum</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="attr">character</span>:<span class="string">&#x27;madoka&#x27;</span>,</span><br><span class="line">    <span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在 store.js 中的getters</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">    <span class="title function_">bigSum</span>(<span class="params">state</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">sum</span>*<span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在组件中引入</span></span><br><span class="line"><span class="keyword">import</span> &#123;mapState,mapGetters&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在组件中的computed</span></span><br><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="comment">//借助mapState生成计算属性,从state中读取数据(对象写法)</span></span><br><span class="line">    ...<span class="title function_">mapState</span>(&#123;<span class="attr">sum</span>:<span class="string">&#x27;sum&#x27;</span>,<span class="attr">character</span>:<span class="string">&#x27;character&#x27;</span>,<span class="attr">sex</span>:<span class="string">&#x27;sex&#x27;</span>&#125;),</span><br><span class="line">    <span class="comment">//借助mapState生成计算属性,从state中读取数据(数组写法)</span></span><br><span class="line">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;character&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>]),  <span class="comment">//要求state中的属性名与组件中引用的属性名一致</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性,从getters中读取数据(对象写法)</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>(&#123;<span class="attr">bigSum</span>:<span class="string">&#x27;bigSum&#x27;</span>&#125;)</span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性,从getters中读取数据(数组写法)</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;bigSum&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Vuex之mapActions与mapMutations"><a href="#Vuex之mapActions与mapMutations" class="headerlink" title="Vuex之mapActions与mapMutations"></a>Vuex之mapActions与mapMutations</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mapActions方法: 用于帮助我们生成与 actions 对话的方法,即: 包含$store.dispatch(xxx)的函数</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成: incrementOdd,incrementWait(对象形式)</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>(&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;),</span><br><span class="line">    <span class="comment">//靠mapActions生成: incrementOdd,incrementWait(数组形式)</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="string">&#x27;jiaWait&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mapMutations方法: 用于帮助我们生成与 mutations 对话的方法,即: 包含$store.commit(xxx)的函数</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">//靠mapMutations生成: increment,decrement(对象形式)</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>(&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br><span class="line">    <span class="comment">//靠mapMutations生成: JIA,JIAN(数组形式)</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;JIA&#x27;</span>,<span class="string">&#x27;JIAN&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="模块化-命名空间"><a href="#模块化-命名空间" class="headerlink" title="模块化+命名空间"></a>模块化+命名空间</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改store.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> countAbout = &#123;</span><br><span class="line">    <span class="attr">namespaced</span>:<span class="literal">true</span>, <span class="comment">//开启命名空间</span></span><br><span class="line">    <span class="attr">state</span>:&#123;</span><br><span class="line">        <span class="attr">x</span>:<span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>:&#123;...&#125;,</span><br><span class="line">    <span class="attr">actions</span>:&#123;...&#125;,</span><br><span class="line">    <span class="attr">getters</span>:&#123;</span><br><span class="line">        <span class="title function_">bigSum</span>(<span class="params">state</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">state</span>:&#123;...&#125;,</span><br><span class="line">    <span class="attr">mutations</span>:&#123;...&#125;,</span><br><span class="line">    <span class="attr">actions</span>:&#123;...&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line"><span class="attr">modules</span>: &#123;</span><br><span class="line">countAbout,</span><br><span class="line">       personAbout</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开启命名空间后,组件中读取 state 数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式一: 自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">personAbout</span>.<span class="property">list</span></span><br><span class="line"><span class="comment">//方式二:借助mapState读取</span></span><br><span class="line">...<span class="title function_">mapState</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开启命名空间后,组件中读取 getters 数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式一: 自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;personAbout/firstPersonName&#x27;</span>]</span><br><span class="line"><span class="comment">//方式二:借助mapGetters读取</span></span><br><span class="line">...<span class="title function_">mapGetters</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;bigSum&#x27;</span>]),</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开启命名空间后,组件中调用 dispatch</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式一: 自己直接dispatch</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;personAbout/addPersonWang&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二:借助mapActions</span></span><br><span class="line">...<span class="title function_">mapActions</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;),</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开启命名空间后,组件中调用 commit</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式一: 自己直接commit</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;personAbout/ADD_PERSON&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二:借助mappMutations</span></span><br><span class="line">...<span class="title function_">mapMutations</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br></pre></td></tr></table></figure><h4 id="路由的基本使用"><a href="#路由的基本使用" class="headerlink" title="路由的基本使用"></a>路由的基本使用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">安装vue-<span class="attr">router</span>: npm i vue-router</span><br><span class="line">应用插件: <span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line">编写router配置项:</span><br><span class="line"><span class="comment">//引入VueRouter</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">//引入路由组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../components/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建router实例对象,去管理一组一组的路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//暴漏router</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 实现切换 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定展示位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="多级路由"><a href="#多级路由" class="headerlink" title="多级路由"></a>多级路由</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置路由规则,使用children配置项</span></span><br><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">            <span class="attr">children</span>:[<span class="comment">//通过children配置子级路由</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,<span class="comment">//此处一定不要写: /news</span></span><br><span class="line">                    <span class="attr">components</span>:<span class="title class_">News</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,<span class="comment">//此处一定不要写: /message</span></span><br><span class="line">                    <span class="attr">components</span>:<span class="title class_">Message</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 跳转(要写完整路径) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home/news&quot;</span>&gt;</span>News<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="路由的query参数"><a href="#路由的query参数" class="headerlink" title="路由的query参数"></a>路由的query参数</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">传递参数</span><br><span class="line"><span class="comment">&lt;!-- 跳转并携带query参数,to的字符串写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;`/home/message/detail?id=$&#123;m.id&#125;&amp;title=$&#123;m.title&#125;`&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 跳转并携带query参数,to的对象写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span></span></span><br><span class="line"><span class="tag"><span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">         path:&#x27;/home/message/detail&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">         query:&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">         id:m.id,</span></span></span><br><span class="line"><span class="string"><span class="tag">         title:m.title</span></span></span><br><span class="line"><span class="string"><span class="tag">         &#125;</span></span></span><br><span class="line"><span class="string"><span class="tag">         &#125;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">接收参数</span><br><span class="line"><span class="comment">//$route.query.id</span></span><br><span class="line"><span class="comment">//$route.query.title</span></span><br></pre></td></tr></table></figure><h4 id="路由的params参数"><a href="#路由的params参数" class="headerlink" title="路由的params参数"></a>路由的params参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置路由 声明接收params参数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span></span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Message</span>,</span><br><span class="line">            <span class="attr">children</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">name</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title&#x27;</span>,  <span class="comment">//使用占位符声明接收params参数</span></span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">Detail</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">传递参数</span><br><span class="line"><span class="comment">&lt;!-- 跳转并携带params参数,to的字符串写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>&quot;`/<span class="attr">home</span>/<span class="attr">message</span>/<span class="attr">detail</span>/$&#123;<span class="attr">m.id</span>&#125;/$&#123;<span class="attr">m.title</span>&#125;`&quot;&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 跳转并携带params参数,to的对象写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span></span></span><br><span class="line"><span class="tag"><span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">         name:&#x27;detail&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">         params:&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">         id:m.id,</span></span></span><br><span class="line"><span class="string"><span class="tag">         title:m.title</span></span></span><br><span class="line"><span class="string"><span class="tag">         &#125;</span></span></span><br><span class="line"><span class="string"><span class="tag">         &#125;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在第8行 路由携带params参数时,若使用to的对象写法,则不能使用path配置项,必须使用name配置! --&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">接收参数</span><br><span class="line"><span class="comment">//$route.params.id</span></span><br><span class="line"><span class="comment">//$route.params.title</span></span><br></pre></td></tr></table></figure><h4 id="路由的props配置"><a href="#路由的props配置" class="headerlink" title="路由的props配置"></a>路由的props配置</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;detail/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line">    <span class="comment">//第一种写法：props值为对象,该对象中所有的key-value的组合最终都会通过props传给Detail组件</span></span><br><span class="line">    <span class="attr">props</span>:&#123;<span class="attr">a</span>:<span class="number">900</span>&#125;</span><br><span class="line">    <span class="comment">//第二种写法：props值为布尔值,布尔值为true,则把路由收到的所有params参数通过props传给Detail组件</span></span><br><span class="line">    <span class="attr">props</span>:<span class="literal">true</span></span><br><span class="line">    <span class="comment">//第三种写法：props值为函数,该函数返回的对象中每一组key-value都会通过props传给Detail组件</span></span><br><span class="line">    <span class="title function_">props</span>(<span class="params">route</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">id</span>:route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line">            <span class="attr">title</span>:route.<span class="property">query</span>.<span class="property">title</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编程式路由导航"><a href="#编程式路由导航" class="headerlink" title="编程式路由导航"></a>编程式路由导航</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//作用: 不借助 &lt;router-link&gt; 实现路由跳转,让路由跳转更加灵活</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//$router的两个API写在methods的事件绑定中</span></span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">pushShow</span>(<span class="params">m</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>:&#123;</span><br><span class="line">        <span class="attr">id</span>:m.<span class="property">id</span>,</span><br><span class="line">                 <span class="attr">title</span>:m.<span class="property">title</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">replaceShow</span>(<span class="params">m</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">            <span class="attr">params</span>:&#123;</span><br><span class="line">                <span class="attr">id</span>:m.<span class="property">id</span>,</span><br><span class="line">                <span class="attr">title</span>:m.<span class="property">title</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//this.$router.forward() 前进</span></span><br><span class="line"><span class="comment">//this.$router.back()    后退</span></span><br><span class="line"><span class="comment">//this.$router.go()      可前进也可后退</span></span><br></pre></td></tr></table></figure><h4 id="缓存路由组件"><a href="#缓存路由组件" class="headerlink" title="缓存路由组件"></a>缓存路由组件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//作用：让不展示的路由组件保持挂载,不被销毁</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- News是组件名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">include</span>=<span class="string">&quot;News&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="两个新的生命周期钩子"><a href="#两个新的生命周期钩子" class="headerlink" title="两个新的生命周期钩子"></a>两个新的生命周期钩子</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//作用：路由组件所独有的两个钩子,用于捕获路由组件的激活状态</span></span><br><span class="line"><span class="title function_">activated</span>(<span class="params"></span>) &#123;      <span class="comment">//路由组件被激活时触发</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">deactivated</span>(<span class="params"></span>) &#123;    <span class="comment">//路由组件失活时触发</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="路由守卫-全局守卫"><a href="#路由守卫-全局守卫" class="headerlink" title="路由守卫(全局守卫)"></a>路由守卫(全局守卫)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写在router.js里</span></span><br><span class="line"><span class="comment">//全局前置守卫,初始化时执行,每次路由切换前执行</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>) =&gt;</span> &#123;   <span class="comment">//这里to指的是要切换到的路由</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">    <span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>) &#123;<span class="comment">//判断当前路由是否需要控制</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;character&#x27;</span>) === <span class="string">&#x27;makise&#x27;</span>) &#123;  <span class="comment">//权限控制的具体规则</span></span><br><span class="line">            <span class="title function_">next</span>()  <span class="comment">//放行</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//全局后置守卫,初始化时执行,每次路由切换后执行</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;afterEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">    <span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">title</span>) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span> <span class="comment">//修改网页的title</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;VUE_TEST&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="路由守卫-独享守卫"><a href="#路由守卫-独享守卫" class="headerlink" title="路由守卫(独享守卫)"></a>路由守卫(独享守卫)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写在某个组件的配置中</span></span><br><span class="line"><span class="title function_">beforeEnter</span>(<span class="params">to,<span class="keyword">from</span>,next</span>) &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="路由守卫-组件守卫"><a href="#路由守卫-组件守卫" class="headerlink" title="路由守卫(组件守卫)"></a>路由守卫(组件守卫)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进入守卫：通过路由规则，进入该组件时被调用</span></span><br><span class="line"><span class="title function_">beforeRouteEnter</span>(<span class="params">to,<span class="keyword">from</span>,next</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//离开守卫：通过路由规则，离开该组件时被调用</span></span><br><span class="line"><span class="title function_">beforeRouteLeave</span>(<span class="params">to,<span class="keyword">from</span>,next</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="路由器的两种工作模式"><a href="#路由器的两种工作模式" class="headerlink" title="路由器的两种工作模式"></a>路由器的两种工作模式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>对于一个url来说,什么是hash值？ ————<span class="comment">// #及其后面的内容就是hash值</span></span><br><span class="line"><span class="number">2.</span>hash值不会包含在<span class="variable constant_">HTTP</span>请求中,即：<span class="comment">// hash值不会带给服务器</span></span><br><span class="line"><span class="number">3.</span><span class="comment">//hash模式:</span></span><br><span class="line"><span class="number">1.</span>地址栏永远带着#号,不美观</span><br><span class="line"><span class="number">2.</span>若以后将地址通过第三方手机app分享,若app校验严格,则地址会被标记为不合法</span><br><span class="line"><span class="number">3.</span>兼容性较好</span><br><span class="line"><span class="number">4.</span><span class="comment">//history模式</span></span><br><span class="line"><span class="number">1.</span>地址栏干净且美观</span><br><span class="line"><span class="number">2.</span>兼容性和hash模式相比略差</span><br><span class="line"><span class="number">3.</span>应用部署上线时需要后端人员支持,解决刷新页面服务端<span class="number">404</span>的问题</span><br><span class="line"><span class="comment">//tips:history模式刷新页面404问题可以在服务端使用&#x27;connect-history-api-fallback&#x27;解决问题</span></span><br><span class="line"><span class="comment">//具体使用方法如下</span></span><br><span class="line"><span class="keyword">const</span> history = <span class="built_in">require</span>(<span class="string">&#x27;connect-history-api-fallback&#x27;</span>)</span><br><span class="line">app.<span class="title function_">use</span>(history)</span><br><span class="line"></span><br><span class="line"><span class="comment">//将静态资源部署在服务器上(使用express插件)</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(__dirname+<span class="string">&#x27;/static&#x27;</span>))</span><br></pre></td></tr></table></figure><h4 id="Vue3的响应式"><a href="#Vue3的响应式" class="headerlink" title="Vue3的响应式"></a>Vue3的响应式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">实现原理:</span><br><span class="line"><span class="comment">//通过Proxy(代理)：拦截对象中任意属性的变化,包括：属性值的读写,属性的添加,属性的删除等</span></span><br><span class="line"><span class="comment">//通过Reflect(反射)：对源对象的属性进行操作</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Proxy</span>(data,&#123;</span><br><span class="line">    <span class="comment">//拦截读取属性值</span></span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target,propName</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target,propName)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//拦截设置属性值或添加新属性</span></span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target,propName,value</span>) &#123;</span><br><span class="line">        <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target,propName,value)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//拦截删除属性</span></span><br><span class="line">    <span class="title function_">deleteProperty</span>(<span class="params">target,propName</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target,prop)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="reactive与ref的对比"><a href="#reactive与ref的对比" class="headerlink" title="reactive与ref的对比"></a>reactive与ref的对比</h4><p>$\textcolor</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端面试题</title>
      <link href="/2022/12/05/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2022/12/05/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a,c</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)<span class="comment">// function a() &#123; &#125;</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">123</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)<span class="comment">// 123</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c)<span class="comment">// function c() &#123; &#125;</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> d = <span class="number">678</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(d)<span class="comment">// undefined</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b)<span class="comment">// undefined</span></span><br><span class="line">    <span class="keyword">var</span> b = <span class="keyword">function</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b)<span class="comment">// function() &#123; &#125;</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c)<span class="comment">// function c() &#123; &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>在作用域的创建阶段,即预编译阶段,预编译的时候到底做了哪些事情 ？</p><p>1.创建了AO对象( JS的变量对象,供JS引擎自己去访问的 )</p><p>2.寻找形参和变量的声明 作为AO对象的属性名 值是undefined</p><p>3.实参和形参相统一</p><p>4.找函数声明 并覆盖变量的声明</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">AO</span>: &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="function"><span class="params">undefined</span> =&gt;</span> <span class="number">1</span> =&gt; <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">    <span class="attr">c</span>:<span class="function"><span class="params">undefined</span> =&gt;</span> <span class="number">2</span> =&gt; <span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">    <span class="attr">d</span>:<span class="literal">undefined</span></span><br><span class="line">    <span class="attr">b</span>:<span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="this的指向问题"><a href="#this的指向问题" class="headerlink" title="this的指向问题"></a>this的指向问题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="number">222</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="number">111</span>,</span><br><span class="line">    <span class="attr">say</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fun = a.<span class="property">say</span></span><br><span class="line"><span class="title function_">fun</span>()<span class="comment">// 222</span></span><br><span class="line">a.<span class="title function_">say</span>()<span class="comment">// 111</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="number">333</span>,</span><br><span class="line">    <span class="attr">say</span>: <span class="keyword">function</span>(<span class="params">fun</span>) &#123;</span><br><span class="line">        <span class="title function_">fun</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">b.<span class="title function_">say</span>(a.<span class="property">say</span>)<span class="comment">// 222</span></span><br><span class="line">b.<span class="property">say</span> = a.<span class="property">say</span></span><br><span class="line">b.<span class="title function_">say</span>()<span class="comment">// 333</span></span><br></pre></td></tr></table></figure><h3 id="防抖函数"><a href="#防抖函数" class="headerlink" title="防抖函数"></a>防抖函数</h3><p>当持续触发事件  一定时间内没有再触发事件  事件处理函数才会执行一次</p><p>如果设定的事件到来之前  又一次触发了事件  就重新开始延时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 防抖函数名(delay) &#123;</span><br><span class="line">    <span class="keyword">let</span> timer</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer)<span class="comment">// 清除定时器</span></span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">        &#125;,delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> debounceFunc = <span class="title function_">debounce</span>(<span class="number">1000</span>)</span><br><span class="line">input.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="title function_">debounceFunc</span>(e.<span class="property">target</span>.<span class="property">value</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="节流函数"><a href="#节流函数" class="headerlink" title="节流函数"></a>节流函数</h3><p>当持续触发事件的时候  保证一段时间内  只调用一次事件处理函数</p><p>一段时间内 只做一件事情</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 节流函数(func,wait) &#123;</span><br><span class="line">    <span class="keyword">let</span> timerOut</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fuction</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!timerOut) &#123;</span><br><span class="line">            timerOut = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="title function_">func</span>()</span><br><span class="line">                timerOut = <span class="literal">null</span></span><br><span class="line">            &#125;,wait)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> 事件函数() &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>())</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;button&#x27;</span>).<span class="property">onclick</span> = 节流函数(事件函数,<span class="number">2000</span>)</span><br></pre></td></tr></table></figure><h3 id="类数组对象如何转化成数组"><a href="#类数组对象如何转化成数组" class="headerlink" title="类数组对象如何转化成数组"></a>类数组对象如何转化成数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">get</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>此时运行代码,会产生一个内容为 { 0: 1, 1: 2, 2: 3 } 的arguments对象 (此对象为类数组对象)</p><p>可以通过 ==Array.prototype.slice.call(arguments)==  或  ==…展开运算符==  转化为数组</p><p>两者的用法分别为</p><pre><code>         1.    test = Array.prototype.slice.call(arguments)         2.    test = [...arguments]</code></pre><p>为什么在调用这个函数时,代码中的’b’会变成一个全局变量?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> a = (b = <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将0赋值给b时，由于没有变量b，则会在js引擎中创建 b，但 b没有被声明，所以 b 就会变成一个全局变量</p><h3 id="哪些操作会造成内存泄漏"><a href="#哪些操作会造成内存泄漏" class="headerlink" title="哪些操作会造成内存泄漏"></a>哪些操作会造成内存泄漏</h3><p>1.闭包</p><p>2.意外的全局变量</p><p>3.被遗忘的定时器</p><p>4.脱离DOM的引用</p><h3 id="手写实现map方法"><a href="#手写实现map方法" class="headerlink" title="手写实现map方法"></a>手写实现map方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">map</span>(<span class="params">arr,mapCallback</span>) &#123;</span><br><span class="line">    <span class="comment">// 检查参数是否正确</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr) || !arr.<span class="property">length</span> || <span class="keyword">typeof</span> mapCallback !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> result = []</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++) &#123;</span><br><span class="line">            result.<span class="title function_">push</span>(<span class="title function_">mapCallback</span>(arr[i],i))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newarr = <span class="title function_">map</span>(arr,<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(index)</span><br><span class="line">    <span class="keyword">return</span> item*<span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newarr)</span><br></pre></td></tr></table></figure><h3 id="Event-loop的重要性"><a href="#Event-loop的重要性" class="headerlink" title="Event-loop的重要性"></a>Event-loop的重要性</h3><p>Event-loop的时间循环机制由三部分组成:</p><p>1.调用栈</p><p>2.微任务队列</p><p>3.消息队列</p><p>event-loop开始的时候 会从全局一行一行的执行  遇到函数调用  会压入到调用栈中</p><p>被压入的函数被称之为帧  当函数返回后会从调用栈中弹出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="title function_">fun1</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun2</span>()<span class="comment">// 输出结果依次为 2 1 3</span></span><br></pre></td></tr></table></figure><p>js中的异步操作  比如  ==fetch==   ==setTimeout==   ==setInterval==   压入到调用栈中的时候里</p><p>面的消息会进去到消息队列中去  消息队列中 会等到调用栈清空之后再执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">    &#125;,<span class="number">0</span>)</span><br><span class="line">    <span class="title function_">func1</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">func2</span>()   <span class="comment">// 输出结果依次为 1 3 2</span></span><br></pre></td></tr></table></figure><p>==promise==  ==async==  ==await==  的异步操作的时候会加入到微任务中去  会在调用栈清空的</p><p>时候立即执行    而且调用栈中加入的微任务也会立即执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">5</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">    &#125;,<span class="number">0</span>)</span><br><span class="line">    <span class="title function_">func1</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">    p.<span class="title function_">then</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(resolve)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">func2</span>()   <span class="comment">// 输出的结果依次为 4 1 3 5 2</span></span><br></pre></td></tr></table></figure><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>定义:  1.只有一个实例   2.可以全局的访问</p><p>主要解决:  一个全局使用的类  频繁的创建和销毁</p><p>何时使用:  当你想控制实例的数目  节省系统化资源的时候</p><p>如何实现:  判断系统是否已经有这个单例  如果有则返回  没有则创建</p><p>单例模式优点:  内存中只要一个实例  减少了内存的开销  尤其是频繁的创建和销毁实例（比如说首页页面的缓存）</p><h5 id="ES5单例模式应用"><a href="#ES5单例模式应用" class="headerlink" title="ES5单例模式应用"></a>ES5单例模式应用</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createLoginLayer = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> div</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!div) &#123;</span><br><span class="line">            div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">            div.<span class="property">innerHTML</span> = <span class="string">&#x27;我是登录的弹窗&#x27;</span></span><br><span class="line">            div.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(div)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> div</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;button&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> loginLayer = <span class="title function_">createLoginLayer</span>()</span><br><span class="line">    <span class="title function_">loginLayer</span>().<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写到至此其实已经实现了单例模式,但需要将各功能抽离   以此来更加优化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单例的职责</span></span><br><span class="line"><span class="keyword">var</span> getSingle = <span class="keyword">function</span> (<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> result</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result || (result = fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建登录框的职责</span></span><br><span class="line"><span class="keyword">var</span> createLoginLayer = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    div.<span class="property">innerHTML</span> = <span class="string">&#x27;我是登录的弹窗&#x27;</span></span><br><span class="line">    div.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(div)</span><br><span class="line">    <span class="keyword">return</span> div</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> createSingleLogin = <span class="title function_">getSingle</span>(createLoginLayer)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;button&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> loginLayer = <span class="title function_">createSingleLogin</span>()</span><br><span class="line">    loginLayer.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p>定义:  定义一系列的算法 把它们都封装起来  并且它们之间可以相互替换</p><p>核心:  将算法的使用 和 算法的实现分离开来</p><h5 id="封装表单验证"><a href="#封装表单验证" class="headerlink" title="封装表单验证"></a>封装表单验证</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> registerForm = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;registerForm&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> strategies = &#123;</span><br><span class="line"><span class="attr">isNonEmpty</span>: <span class="keyword">function</span> (<span class="params">value, errorMsg</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> errorMsg</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">minLength</span>: <span class="keyword">function</span> (<span class="params">value, length, errorMsg</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value.<span class="property">length</span> &lt; <span class="number">6</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> errorMsg</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">isMobile</span>: <span class="keyword">function</span> (<span class="params">value, errorMsg</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="regexp">/^1[3|5|8][0-9]&#123;9&#125;$/</span>.<span class="title function_">test</span>(value)) &#123;</span><br><span class="line">            <span class="keyword">return</span> errorMsg</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> validateFun = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> validator = <span class="keyword">new</span> <span class="title function_">validator</span>()</span><br><span class="line">    <span class="comment">// 添加验证规则</span></span><br><span class="line">    validator.<span class="title function_">add</span>(registerForm.<span class="property">username</span>, <span class="string">&#x27;isNonEmpty&#x27;</span>, <span class="string">&#x27;用户名不能为空&#x27;</span>)</span><br><span class="line">    validator.<span class="title function_">add</span>(registerForm.<span class="property">username</span>, <span class="string">&#x27;minLength:6&#x27;</span>, <span class="string">&#x27;密码长度不能小于6位&#x27;</span>)</span><br><span class="line">    validator.<span class="title function_">add</span>(registerForm.<span class="property">username</span>, <span class="string">&#x27;isMobile&#x27;</span>, <span class="string">&#x27;手机号格式不正确&#x27;</span>)</span><br><span class="line">    <span class="comment">// 开启验证</span></span><br><span class="line">    <span class="keyword">var</span> errorMsg = validator.<span class="title function_">start</span>()</span><br><span class="line">    <span class="keyword">return</span> errorMsg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">registerForm.<span class="property">onsubmit</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> errorMsg = <span class="title function_">validateFun</span>()</span><br><span class="line">    <span class="keyword">if</span> (errorMsg) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(errorMsg)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//封装策略类 构造函数 class</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Validator</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cache</span> = []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Validator</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">add</span> = <span class="keyword">function</span> (<span class="params">dom.rule,errorMsg</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> ary = rule.<span class="title function_">spilt</span>(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">push</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> strategy = ary..<span class="title function_">shift</span>()  <span class="comment">// 用户选择的验证规则</span></span><br><span class="line">        ary.<span class="title function_">unshitf</span>(dom.<span class="property">value</span>)</span><br><span class="line">        ary.<span class="title function_">push</span>(errorMsg)</span><br><span class="line">        <span class="keyword">return</span> strategies[strategy](...ary)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Validator</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">start</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i =<span class="number">0</span>,vaFunc; vaFunc = <span class="variable language_">this</span>.<span class="property">cache</span>[i++]) &#123;</span><br><span class="line">        <span class="keyword">var</span> msg = <span class="title function_">vaFunc</span>()</span><br><span class="line">        <span class="keyword">if</span> (msg) &#123;</span><br><span class="line">            <span class="keyword">return</span> msg</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h3><p>1.首先要确定好谁是发布者</p><p>2.然后给发布者添加一个缓存列表  用于存放回调函数来通知订阅者</p><p>3.最后就是发布消息  发布者遍历这个缓存列表  依次触发里面存放的订阅者回调函数</p><h3 id="数组扁平化"><a href="#数组扁平化" class="headerlink" title="数组扁平化"></a>数组扁平化</h3><p>数组扁平化就是指将一个多维数组变为一个一维数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">arr = [<span class="number">1</span>,[<span class="number">2</span>,[<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>]]],<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法1 使用flat</span></span><br><span class="line"><span class="keyword">const</span> res1 = arr.<span class="title function_">flat</span>(<span class="title class_">Infinity</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法2 使用正则表达式</span></span><br><span class="line"><span class="keyword">const</span> res2 = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(arr).<span class="title function_">replace</span>(<span class="regexp">/\[ | \]/g</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> res3 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;[&#x27;</span> + res2 + <span class="string">&#x27;]&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res3)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法3 使用reduce</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">newArr</span> = (<span class="params">arr</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre,cur</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pre.<span class="title function_">concat</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(cur) ? <span class="title function_">newArr</span>(cur) : cur)</span><br><span class="line">    &#125;,[])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> res4 = <span class="title function_">newArr</span>(arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res4)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法4 使用函数递归</span></span><br><span class="line"><span class="keyword">const</span> res5 = []</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params">arr</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr[i])) &#123;</span><br><span class="line">            <span class="title function_">fn</span>(arr[i])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res4.<span class="title function_">push</span>(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res5)</span><br></pre></td></tr></table></figure><h3 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h3><p>BFC就是指块级格式化上下文,它是指一个独立的块级渲染区域,只有Block-level BOX参与,</p><p>该区域拥有一套渲染规则来约束块级盒子的布局,且与区域外部无关</p><h4 id="如何创建BFC"><a href="#如何创建BFC" class="headerlink" title="如何创建BFC"></a>如何创建BFC</h4><ol><li><p>float的值不为none</p></li><li><p>position的值不是static或者relative</p></li><li><p>display的值是inline-block,flex或者inline-flex</p></li><li>overflow: hidden</li></ol><h4 id="BFC的其它作用"><a href="#BFC的其它作用" class="headerlink" title="BFC的其它作用"></a>BFC的其它作用</h4><ol><li><p>BFC可以取消盒子的margin塌陷</p></li><li><p>BFC可以阻止元素被浮动元素覆盖</p></li></ol><h3 id="数组的reduce方法"><a href="#数组的reduce方法" class="headerlink" title="数组的reduce方法"></a>数组的reduce方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正常写法</span></span><br><span class="line">arr.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">pre,cur</span>) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;,init) <span class="comment">//有初始值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数写法</span></span><br><span class="line">arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre,cur</span>) =&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;)<span class="comment">//没有初始值</span></span><br></pre></td></tr></table></figure><h5 id="reduce的参数"><a href="#reduce的参数" class="headerlink" title="reduce的参数"></a>reduce的参数</h5><p>arr  表示原数组</p><p>pre  表示上一次调用回调时的返回值,当有初始值时,则为初始值init</p><p>cur  表示当前正在处理的数组元素</p><p>index  表示当前正在处理的数组元素的索引, 若提供初始值,则索引为0, 否则索引为1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 reduce 计算数组中每个元素出现的次数</span></span><br><span class="line"><span class="keyword">const</span> person = [<span class="string">&#x27;hanekawa&#x27;</span>,<span class="string">&#x27;makise&#x27;</span>,<span class="string">&#x27;hanekawa&#x27;</span>,<span class="string">&#x27;madoka&#x27;</span>,<span class="string">&#x27;madoka&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = person.<span class="title function_">recuce</span>(<span class="function">(<span class="params">pre,cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (cur <span class="keyword">in</span> pre) &#123;</span><br><span class="line">        person[cur]++</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        person[cur] = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre</span><br><span class="line">&#125;,&#123;&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 reduce 实现数组去重</span></span><br><span class="line"><span class="keyword">const</span> person = [<span class="string">&#x27;hanekawa&#x27;</span>,<span class="string">&#x27;makise&#x27;</span>,<span class="string">&#x27;hanekawa&#x27;</span>,<span class="string">&#x27;madoka&#x27;</span>,<span class="string">&#x27;madoka&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = person.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre,cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!pre.<span class="title function_">includes</span>(cur)) &#123;</span><br><span class="line">        pre.<span class="title function_">push</span>(cur)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre</span><br><span class="line">&#125;,[])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><h3 id="call-apply-bind-之间的区别"><a href="#call-apply-bind-之间的区别" class="headerlink" title="call  apply  bind 之间的区别"></a>call  apply  bind 之间的区别</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需求 求数组里面的最大值</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">call</span>(<span class="literal">null</span>, <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>))<span class="comment">// 打印结果为 6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">call</span>(<span class="literal">null</span>, arr1))<span class="comment">// 打印结果为 NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, arr1))<span class="comment">// 打印结果为 6</span></span><br></pre></td></tr></table></figure><p>结论: call的传参要传参数列表   apply的传参要传数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// call方法的应用  把伪数组转换成数组</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Arr</span> = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(likeArr)  <span class="comment">// 但有兼容性问题 ie8以下不能用</span></span><br></pre></td></tr></table></figure><p>所以可以改进一下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">listToArray</span>(<span class="params">likeArray</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">Arr</span> = []</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="title class_">Arr</span> = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(likeArr)</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;<span class="comment">// 不兼容情况的处理方式</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;likeArray.<span class="property">length</span>;i++) &#123;</span><br><span class="line">            <span class="title class_">Arr</span>[<span class="title class_">Arr</span>.<span class="property">length</span>] = likeArray[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现 子类继承父类的属性和方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=[name]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实现继承属性</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>,<span class="string">&#x27;hane&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实现继承方法</span></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Child</span></span><br></pre></td></tr></table></figure><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>tips: map是ES6的新语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruitsColor = <span class="keyword">new</span> <span class="title class_">Map</span>().<span class="title function_">set</span>(<span class="string">&#x27;red&#x27;</span>,[<span class="string">&#x27;apple&#x27;</span>]).<span class="title function_">set</span>(<span class="string">&#x27;yellow&#x27;</span>,[<span class="string">&#x27;banana&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printFruits</span>(<span class="params">color</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> fruitsColor.<span class="title function_">get</span>(color) || []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">printFruits</span>(<span class="literal">null</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">printFruits</span>(<span class="string">&#x27;yellow&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="Array-some-和-Array-every"><a href="#Array-some-和-Array-every" class="headerlink" title="Array.some 和 Array.every"></a>Array.some 和 Array.every</h3><p>tips: Array.some 和 Array.every也是ES6的新语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检查是否所有的水果都是红色</span></span><br><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>:<span class="string">&#x27;apple&#x27;</span>,<span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>:<span class="string">&#x27;banana&#x27;</span>,<span class="attr">color</span>:<span class="string">&#x27;yellow&#x27;</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">CheckAll</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> isAllRed = fruits.<span class="title function_">every</span>(<span class="function"><span class="params">f</span> =&gt;</span> f.<span class="property">color</span> == <span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(isAllRed)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查是否有红色的水果</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">CheckSome</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> isExist = fruits.<span class="title function_">some</span>(<span class="function"><span class="params">f</span> =&gt;</span> f.<span class="property">color</span> == <span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="property">log</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Vue中路由传值params与query的区别"><a href="#Vue中路由传值params与query的区别" class="headerlink" title="Vue中路由传值params与query的区别"></a>Vue中路由传值params与query的区别</h3><p>1.<strong>params进行路由传参的时候只能由name引入</strong></p><p>2.query进行路由传参的时候只能由path引入</p><p>3.使用query传参时在浏览器地址栏中会显示参数,而params不会</p><h3 id="Vue中v-if和v-show的区别"><a href="#Vue中v-if和v-show的区别" class="headerlink" title="Vue中v-if和v-show的区别"></a>Vue中v-if和v-show的区别</h3><ol><li><p>v-show 只是简单的控制元素的 display 属性，而 v-if 才是条件渲染（条件为真，元素将会被渲染，条件为假，元素会被销毁）</p></li><li><p>v-show 有更高的首次渲染开销，而 v-if 的首次渲染开销要小的多</p></li><li><p>v-if 有更高的切换开销，v-show 切换开销小</p></li><li>如果要实现数据频繁的显示与隐藏,建议使用v-show</li></ol><h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><p>域由三部分组成：协议，完整的主机名和端口</p><p>同源策略通过阻止访问不同源的资源来防止跨域攻击。该策略仍然运行某些标签(比如 <img> )嵌入不同源的资源</p><h3 id="跨域问题的解决方案"><a href="#跨域问题的解决方案" class="headerlink" title="跨域问题的解决方案"></a>跨域问题的解决方案</h3><p>1.JSONP</p><p>2.反向代理</p><p>3.CORS</p><p>4.postMessage</p><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>优点:兼容性好        缺点:只能发送get请求</p><p>封装jsonp函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">jsonp</span>(<span class="params">url,callback</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> cb = <span class="string">&#x27;__jp0&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">    script.<span class="property">src</span> = <span class="string">`<span class="subst">$&#123;url&#125;</span>?callback=<span class="subst">$&#123;cb&#125;</span>`</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script)</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">window</span>[cb] = <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="title function_">clear</span>()</span><br><span class="line">        <span class="title function_">callback</span>(data)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(script)</span><br><span class="line">        <span class="variable language_">window</span>[cb] = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>1.基于Node.js配置反向代理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件 app.js</span></span><br><span class="line"><span class="keyword">const</span> = &#123; createProxyMiddleware &#125; = <span class="built_in">require</span>(<span class="string">&#x27;http-proxy-middleware&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>,<span class="title function_">createProxyMiddleware</span>(&#123;</span><br><span class="line">    <span class="attr">target</span>: <span class="string">&#x27;http://127.0.0.1:8020&#x27;</span>,</span><br><span class="line">    <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">pathRewrite</span>: &#123; <span class="string">&#x27;^/api&#x27;</span>:<span class="string">&#x27;/api/v2&#x27;</span> &#125;</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>cors(跨域资源共享),是一种基于HTTP请求头的机制,该机制允许我们使用Ajax发送跨域请求,只要HTTP响应头中包含了相应的CORS响应头</p><p>cors解决跨域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件　router.js</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>,<span class="string">&#x27;*&#x27;</span>)  <span class="comment">//允许简单请求</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>,[<span class="string">&#x27;PUT&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;DELETE&#x27;</span>]) <span class="comment">//允许复杂请求</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>,[<span class="string">&#x27;Content-Type&#x27;</span>]) <span class="comment">//允许复杂请求</span></span><br></pre></td></tr></table></figure><h3 id="如何水平垂直居中一个元素"><a href="#如何水平垂直居中一个元素" class="headerlink" title="如何水平垂直居中一个元素"></a>如何水平垂直居中一个元素</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">方法一</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">方法二</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">97vh</span>;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">方法三</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">97vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">方法四</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JavaScript的数据类型"><a href="#JavaScript的数据类型" class="headerlink" title="JavaScript的数据类型"></a>JavaScript的数据类型</h3><h4 id="分为基本数据类型和引用数据类型"><a href="#分为基本数据类型和引用数据类型" class="headerlink" title="分为基本数据类型和引用数据类型"></a>分为基本数据类型和引用数据类型</h4><p>1.基本数据类型: string / number / boolean / null / undefined / symbol</p><p>2.引用数据类型: object / function / array</p><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>1.声明变量时的存储分配</p><p>基本数据类型存储在栈中，var a = 10</p><p>引用数据类型存储在堆中，var arr = [1,2,3,4,….]</p><p>2.不同的内存分配机制也造成了不同的访问机制</p><p>不能够直接访问堆内存空间的位置以及直接操作堆内存空间，只能操作对象在栈内存中的引用地址</p><p>基本数据类型能够直接访问，引用数据类型访问引用地址，根据引用地址找到堆中实体</p><p>3.复制变量时的不同</p><p>基本数据类型: var a = 1,var b = a，将原始值的副本赋值给新的变量</p><p>引用数据类型: var obj = {name: ‘张三’},var obj1 = obj，将引用地址赋值给新的变量</p><h3 id="深拷贝与浅拷贝到区别"><a href="#深拷贝与浅拷贝到区别" class="headerlink" title="深拷贝与浅拷贝到区别"></a>深拷贝与浅拷贝到区别</h3><p>浅拷贝: 只复制指向某个对象的指针，而不复制这个对象本身，新旧对象共享一块内存</p><p>深拷贝: 复制并创建一个一模一样的对象，不共享内存，修改新对象旧对象不会变</p><h3 id="深拷贝与浅拷贝的实现方法"><a href="#深拷贝与浅拷贝的实现方法" class="headerlink" title="深拷贝与浅拷贝的实现方法"></a>深拷贝与浅拷贝的实现方法</h3><p>浅拷贝</p><p>浅拷贝只是拷贝一层，更深层次对象级别的只拷贝引用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法一  使用 for in</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ShallowCopy</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> newObj = &#123; &#125;;</span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        newObj[key] = obj[key];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法二  使用ES6的 assign</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ShallowCopy</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> newObj = &#123; &#125;;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">assign</span>(newObj,obj);</span><br><span class="line">    <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>深拷贝</p><p>而深拷贝则是拷贝所有层级</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法一 使用 JSON.stringify 和 JSON.parse</span></span><br><span class="line"><span class="comment">//缺点：当要拷贝到对象内有 函数属性 或 值为undefined 的属性时,拷贝时会被剔除</span></span><br><span class="line">newObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj))</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法二 使用 for in 和 递归 实现完美的深拷贝</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span> || obj == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> result;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">    result = [];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">      result[key] = <span class="title function_">deepClone</span>(obj[key]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Vue中父子组件间的通信方式"><a href="#Vue中父子组件间的通信方式" class="headerlink" title="Vue中父子组件间的通信方式"></a>Vue中父子组件间的通信方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. props 与 $emit</span></span><br><span class="line"><span class="comment">//父传子</span></span><br><span class="line">&lt;<span class="title class_">Child</span> :message = <span class="string">&quot;message&quot;</span>&gt;<span class="comment">// 父组件</span></span><br><span class="line"><span class="comment">//子组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="attr">props</span>: [<span class="string">&#x27;message&#x27;</span>]<span class="comment">//接收message变量</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;&#123; message &#125;&#125;<span class="comment">//并使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//子传父</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//子组件</span></span><br><span class="line">&lt;button @click=<span class="string">&quot;add&quot;</span>&gt;添加&lt;/button&gt;</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.$emit(<span class="string">&#x27;add&#x27;</span>,message)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//父组件</span></span><br><span class="line">&lt;<span class="title class_">Child</span> @add=<span class="string">&quot;add&quot;</span> /&gt;</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">add</span>(<span class="params">message</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(message)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序笔记</title>
      <link href="/2022/12/03/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/12/03/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="关于-rpx-与-px"><a href="#关于-rpx-与-px" class="headerlink" title="关于 rpx 与 px"></a>关于 rpx 与 px</h3><p>在<code>iPhone 6/7/8</code>中，<code>1px = 2rpx</code></p><h3 id="JSON配置文件"><a href="#JSON配置文件" class="headerlink" title="JSON配置文件"></a>JSON配置文件</h3><p><code>app.json文件</code>：是当前小程序的<code>全局配置</code>，包括了小程序的<code>所有页面路径</code>，<code>窗口外观</code>，<code>界面表现</code>，<code>底部tab</code>等。里面的配置内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="comment">//用来记录当前小程序所有页面的路径</span></span><br><span class="line">        <span class="string">&quot;pages/index/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;window&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  <span class="comment">//全局定义小程序所有页面的背景色，文字颜色等等</span></span><br><span class="line">        <span class="attr">&quot;backgroundTextStyle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;light&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;navigationBarBackgroundColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#fff&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;navigationBarTitleText&quot;</span><span class="punctuation">:</span> <span class="string">&quot;WeChat&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;navigationBarTextStyle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;black&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;v2&quot;</span><span class="punctuation">,</span>  <span class="comment">//全局定义小程序组件所使用的样式版本</span></span><br><span class="line">    <span class="attr">&quot;sitemapLocation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sitemap.json&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="新建小程序页面"><a href="#新建小程序页面" class="headerlink" title="新建小程序页面"></a>新建小程序页面</h3><p>只需要在<code>app.json-&gt;pages</code>中新增页面的存放路径，小程序开发者工具即可帮我们自动创建对应的页面文件</p><h3 id="修改项目首页"><a href="#修改项目首页" class="headerlink" title="修改项目首页"></a>修改项目首页</h3><p>只需要调整<code>app.json-&gt;pages</code>数组中页面路径的前后顺序，即可修改项目的首页，pages中的第一条路径是首页</p><h3 id="bindtap按钮事件绑定"><a href="#bindtap按钮事件绑定" class="headerlink" title="bindtap按钮事件绑定"></a>bindtap按钮事件绑定</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;btnTapHandler&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在事件处理函数中为data中的数据赋值"><a href="#在事件处理函数中为data中的数据赋值" class="headerlink" title="在事件处理函数中为data中的数据赋值"></a>在事件处理函数中为data中的数据赋值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">changeCount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="事件传参"><a href="#事件传参" class="headerlink" title="事件传参"></a>事件传参</h3><p>小程序中的事件传参比较特殊，<code>不能在绑定事件的同时为事件处理函数传递参数</code>,例如下面代码不能正常运作</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;btnHandler(123)&quot;</span>&gt;</span>事件传参<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以使用组件提供的<code>data-*</code>自定义属性传参，其中<code>*代表的是参数的名字</code>，示例代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;btnHandler&quot;</span> <span class="attr">data-info</span>=<span class="string">&quot;&#123;&#123;2&#125;&#125;&quot;</span>&gt;</span>事件传参<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="事件传参的参数获取"><a href="#事件传参的参数获取" class="headerlink" title="事件传参的参数获取"></a>事件传参的参数获取</h3><p>在事件处理函数中，通过<code>event.target.dataset.参数名</code>即可获取到<code>具体参数的值</code>，示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">btnHandler</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="comment">// dataset是一个对象，包含了所有通过 data-* 传递过来的参数项</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">dataset</span>)</span><br><span class="line">    <span class="comment">// 通过 dataset 可以访问到具体参数的值</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">dataset</span>.<span class="property">info</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="bindinput输入事件绑定"><a href="#bindinput输入事件绑定" class="headerlink" title="bindinput输入事件绑定"></a>bindinput输入事件绑定</h3><p>通过<code>bindinput</code>，可以为文本框绑定输入事件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">intpu</span> <span class="attr">bindinput</span>=<span class="string">&quot;inputHandler&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">intpu</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以通过<code>event.detail.value</code>获取输入框内的值</p><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><p>在小程序中，使用<code>wx:if=&quot;&#123;&#123;condition&#125;&#125;&quot;</code>来判断是否需要渲染该代码块：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- condition为 true 时才渲染 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;condition&#125;&#125;&quot;</span>&gt;</span> True <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以使用<code>wx:elif</code>和<code>wx:else</code>来添加 else 判断：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;type === 1&#125;&#125;&quot;</span>&gt;</span> 男 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:elif</span>=<span class="string">&quot;&#123;&#123;type === 2&#125;&#125;&quot;</span>&gt;</span> 女 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:else</span>&gt;</span> 保密 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果要<code>一次性控制多个组件的展示与隐藏</code>,可以使用一个<code>&lt;block&gt;&lt;/block&gt;</code>将多个组件包裹起来，并在<code>&lt;block&gt;</code>标签上使用<code>wx:if</code>控制属性，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;block&gt;并不是一个组件，它只是一个包裹性质的容器，不会在页面中渲染 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blobk</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;true&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span> view1 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span> view2 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">blobk</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><p>通过<code>wx:for</code>可以根据指定的数组，循环渲染重复的组件结构，示例如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;array&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">索引是：&#123;&#123;index&#125;&#125; 当前项是：&#123;&#123;item&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>wx:for 与 wx:key 搭配使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;array&#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="样式导入"><a href="#样式导入" class="headerlink" title="样式导入"></a>样式导入</h3><p>可以使用<code>@import</code>导入外联样式，使用的是相对路径</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;/common/common.wxss&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="Window属性相关"><a href="#Window属性相关" class="headerlink" title="Window属性相关"></a>Window属性相关</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;window&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 开启全局下拉刷新</span></span><br><span class="line">    “enablePullDownRefresh”<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 下拉刷新区域的背景颜色</span></span><br><span class="line">    <span class="attr">&quot;backgroundColor&quot;</span><span class="punctuation">:</span> #<span class="number">030303</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 下拉刷新时 loading 的样式</span></span><br><span class="line">    <span class="attr">&quot;backgroundTextStyle&quot;</span><span class="punctuation">:</span> dark|light<span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 设置上拉触底的距离</span></span><br><span class="line">    <span class="attr">&quot;onReachBottomDistance&quot;</span><span class="punctuation">:</span> 默认<span class="number">50</span>px<span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="配置tabBar"><a href="#配置tabBar" class="headerlink" title="配置tabBar"></a>配置tabBar</h3><p>在<code>app.json</code>中添加一个属性<code>&quot;tabBar&quot;: &#123; &#125;</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;tabBar&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="comment">// 第一个tab项</span></span><br><span class="line">            <span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">,</span><span class="comment">// 必填 页面路径，页面必须在pages中预先定义</span></span><br><span class="line">            <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">,</span><span class="comment">// 必填 tab上显示的文字</span></span><br><span class="line">            <span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span> <span class="punctuation">,</span><span class="comment">// 选填 未选中时的图标路径</span></span><br><span class="line">            <span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span><span class="comment">// 选填 选中时的图标路径</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="comment">// 第二个tab项</span></span><br><span class="line">            <span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">,</span><span class="comment">// 必填 页面路径，页面必须在pages中预先定义</span></span><br><span class="line">            <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">,</span><span class="comment">// 必填 tab上显示的文字</span></span><br><span class="line">            <span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span> <span class="punctuation">,</span><span class="comment">// 选填 未选中时的图标路径</span></span><br><span class="line">            <span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span><span class="comment">// 选填 选中时的图标路径</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="tabBar的属性"><a href="#tabBar的属性" class="headerlink" title="tabBar的属性"></a>tabBar的属性</h3><p><code>backgroundColor</code>：tabBar的背景色</p><p><code>selectedIconPath</code>：选中时的图片路径</p><p><code>borderStyle</code>：tabBar上边框颜色</p><p><code>iconPath</code>：未选中时的图片路径</p><p><code>selectedColor</code>：tab上的文字选中时的颜色</p><p><code>color</code>：tab上文字未选中的颜色</p><h3 id="网络请求的限制"><a href="#网络请求的限制" class="headerlink" title="网络请求的限制"></a>网络请求的限制</h3><p>出于<code>安全性</code>方面的考虑，小程序官方对<code>数据接口的请求</code>做出了如下两个限制：</p><p>(1). 只能请求<code>HTTPS</code>类型的接口</p><p>(2). 必须将<code>接口的域名</code>添加到<code>信任列表</code>中</p><h3 id="配置-request-合法域名"><a href="#配置-request-合法域名" class="headerlink" title="配置 request 合法域名"></a>配置 request 合法域名</h3><p>步骤：<code>登录微信小程序管理后台-&gt;开发-&gt;开发设置-&gt;服务器域名-&gt;修改request合法域名</code>。</p><p>注意事项：</p><p>(1). <code>域名只支持https协议</code>.</p><p>(2). <code>域名不能使用IP地址或localhost</code>.</p><p>(3). <code>域名必须经过ICP备案</code>.</p><p>(4). <code>服务器域名一个月内最多申请5次修改</code>.</p><h3 id="网络数据请求"><a href="#网络数据请求" class="headerlink" title="网络数据请求"></a>网络数据请求</h3><p>调用微信小程序提供的<code>wx.request()方法</code>，可以发起<code>GET</code>数据请求，示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>,<span class="comment">// 请求的接口地址 必须基于https协议</span></span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,<span class="comment">// 请求的方式</span></span><br><span class="line">    <span class="attr">data</span>: &#123;<span class="comment">// 发送到服务器的数据</span></span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;makise&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;<span class="comment">// 请求成功之后的回调函数</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="关于跨域和-Ajax-的说明"><a href="#关于跨域和-Ajax-的说明" class="headerlink" title="关于跨域和 Ajax 的说明"></a>关于跨域和 Ajax 的说明</h3><p>跨域问题<code>只存在于</code>基于浏览器的 Web 开发中。由于<code>小程序的宿主环境</code>不是浏览器，而是<code>微信客户端</code>，所以<code>小程序中不存在跨域的问题</code>。</p><p><code>Ajax 技术</code>的核心是依赖于浏览器中的 <code>XMLHttpRequest</code>这个对象，由于<code>小程序的宿主环境是微信客户端</code>，所以小程序中<code>不能叫做</code>“发起 Ajax 请求”，而是叫做<code>&quot;发起网络数据请求&quot;</code>。</p><h3 id="首页轮播图"><a href="#首页轮播图" class="headerlink" title="首页轮播图"></a>首页轮播图</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 示例代码  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- indicator-dots：为轮播图增加小圆点 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- circular：使轮播图能够循环播放 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">swiper</span> <span class="attr">indicator-dots</span> <span class="attr">circular</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">swiper-item</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;swiperList&#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;item.image&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="导航到-tabBar-页面-声明式导航"><a href="#导航到-tabBar-页面-声明式导航" class="headerlink" title="导航到 tabBar 页面 (声明式导航)"></a>导航到 tabBar 页面 (声明式导航)</h3><p><code>tabBar页面</code>指的是被配置为 tabBar 的页面</p><p>在使用<code>&lt;navigator&gt;</code>组件跳转到指定的 tabBar 页面时，需要指定<code>url属性</code>和<code>open-type属性</code>.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">&quot;/pages/message/message&quot;</span> <span class="attr">open-type</span>=<span class="string">&quot;switchTab&quot;</span>&gt;</span>消息页<span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br></pre></td></tr></table></figure><p>tips: 如果要导航到<code>非tabBar页面</code>，只需将<code>open-type=&quot;switchTab&quot;</code>删去即可</p><h3 id="后退导航-声明式导航"><a href="#后退导航-声明式导航" class="headerlink" title="后退导航(声明式导航)"></a>后退导航(声明式导航)</h3><p>如果要后退到上一页面或多级页面，则需指定<code>open-type</code>属性和<code>delta属性</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">navigator</span> <span class="attr">open-type</span>=<span class="string">&quot;navigateBack&quot;</span> <span class="attr">delta</span>=<span class="string">&quot;1&quot;</span>&gt;</span>返回上一页<span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br></pre></td></tr></table></figure><p>tips: 如果只是要<code>后退到上一页面</code>，则可以<code>省略delta属性</code>，因为其<code>默认值就是1</code></p><h3 id="导航到-tabBar-页面-编程式导航"><a href="#导航到-tabBar-页面-编程式导航" class="headerlink" title="导航到 tabBar 页面 (编程式导航)"></a>导航到 tabBar 页面 (编程式导航)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 页面结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;gotoMessage&quot;</span>&gt;</span>跳转到message页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过编程式导航，跳转到 message 页面</span></span><br><span class="line"><span class="title function_">gotoMessage</span>(<span class="params"></span>) &#123;</span><br><span class="line">    wx.<span class="title function_">switchTab</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/pages/message/message&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="导航到非-tabBar-页面-编程式导航"><a href="#导航到非-tabBar-页面-编程式导航" class="headerlink" title="导航到非 tabBar 页面 (编程式导航)"></a>导航到非 tabBar 页面 (编程式导航)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 页面结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;gotoInfo&quot;</span>&gt;</span>跳转到info页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过编程式导航，跳转到 message 页面</span></span><br><span class="line"><span class="title function_">gotoInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    wx.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/pages/info/info&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后退导航-编程式导航"><a href="#后退导航-编程式导航" class="headerlink" title="后退导航(编程式导航)"></a>后退导航(编程式导航)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;goBack&quot;</span>&gt;</span>后退<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">goBack</span>(<span class="params"></span>) &#123;</span><br><span class="line">    wx.<span class="title function_">navigateBack</span>(&#123;</span><br><span class="line">        <span class="attr">delta</span>: <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="声明式导航传参"><a href="#声明式导航传参" class="headerlink" title="声明式导航传参"></a>声明式导航传参</h3><p>示例代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">&quot;/pages/info/info?name=zs&amp;age=20&quot;</span>&gt;</span>跳转到info页面<span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编程式导航传参"><a href="#编程式导航传参" class="headerlink" title="编程式导航传参"></a>编程式导航传参</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;gotoInfo&quot;</span>&gt;</span>跳转到info页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">gotoInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    wx.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/pages/info/info?name=ls&amp;gender=男&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在onLoad中接收导航参数"><a href="#在onLoad中接收导航参数" class="headerlink" title="在onLoad中接收导航参数"></a>在onLoad中接收导航参数</h3><p>通过<code>声明式导航传参</code>或<code>编程式导航传参</code>所携带的参数，可以直接在<code>onLoad事件</code>中直接获取到，示例如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明周期函数--监听页面加载</span></span><br><span class="line"><span class="attr">onLoad</span>: <span class="keyword">function</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="comment">// options就是导航传递过来的参数对象</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="监听页面刷新事件"><a href="#监听页面刷新事件" class="headerlink" title="监听页面刷新事件"></a>监听页面刷新事件</h3><p>可以使用每个页面<code>xxx.js</code>中自带的<code>onPullDownRefresh</code>函数来实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">onPullDownRefresh</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当处理完下拉刷新后，下拉刷新的 loading 效果会一直显示，<code>不会主动消失</code>，此时可以调用<code>wx.stopPullDownRefresh()</code>来停止</p><h3 id="监听上拉触底事件"><a href="#监听上拉触底事件" class="headerlink" title="监听上拉触底事件"></a>监听上拉触底事件</h3><p><code>上拉触底</code>是移动端的专有名词，通过手指在屏幕上的上拉滑动操作，从而<code>加载更多数据</code>的行为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">onReachBottom</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;触发了上拉触底事件&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一个上拉触底案例"><a href="#一个上拉触底案例" class="headerlink" title="一个上拉触底案例"></a>一个上拉触底案例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- example.wxml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;colorList&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">wx:key</span>=<span class="string">&quot;index&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;num-item&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">style</span>=<span class="string">&quot;background-color: rgba(&#123;&#123;item&#125;&#125;);&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    &#123;&#123;item&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* example.wxss */</span></span><br><span class="line"><span class="selector-class">.num-item</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1</span>rpx solid <span class="number">#efefef</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8</span>rpx;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">200</span>rpx;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10</span>rpx;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="number">0</span>rpx <span class="number">0</span>rpx <span class="number">5</span>rpx <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">1</span>rpx <span class="number">1</span>rpx <span class="number">6</span>rpx <span class="number">#aaa</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// example.js</span></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">colorList</span>: [],</span><br><span class="line">    <span class="attr">isLoading</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">getColors</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">            <span class="attr">isLoading</span>: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">        wx.<span class="title function_">showLoading</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;数据加载中...&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">        wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;https://www.escook.cn/api/color&#x27;</span>,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">            <span class="attr">success</span>: <span class="function">(<span class="params">&#123; data:res &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">          <span class="attr">colorList</span>: [...<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">colorList</span>,...res.<span class="property">data</span>]</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">            <span class="attr">complete</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                wx.<span class="title function_">hideLoading</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">          <span class="attr">isLoading</span>: <span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">onLoad</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getColors</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">    <span class="title function_">onReachBottom</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">isLoading</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getColors</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="应用的生命周期函数"><a href="#应用的生命周期函数" class="headerlink" title="应用的生命周期函数"></a>应用的生命周期函数</h3><p>小程序的<code>应用生命周期函数</code>需要在<code>app.js</code>中进行声明，示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js文件</span></span><br><span class="line"><span class="title class_">App</span>(&#123;</span><br><span class="line">    <span class="comment">// 小程序初始化完成时，执行此函数，全局只触发一次。可以做一些初始化的工作</span></span><br><span class="line">    <span class="attr">onLaunch</span>: <span class="keyword">function</span>(<span class="params">options</span>) &#123; &#125;,</span><br><span class="line">    <span class="comment">// 小程序启动，或从后台进入前台显示时触发</span></span><br><span class="line">    <span class="attr">onShow</span>: <span class="keyword">function</span>(<span class="params">options</span>) &#123; &#125;,</span><br><span class="line">    <span class="comment">// 小程序从前台进入后台时触发</span></span><br><span class="line">    <span class="attr">onHide</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 页面的 .js文件</span></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">    onLoad  : <span class="keyword">function</span>(<span class="params">options</span>) &#123; &#125;,  <span class="comment">// 监听页面加载，一个页面调用1次</span></span><br><span class="line">    onShow  : <span class="keyword">function</span>(<span class="params"></span>) &#123; &#125;,         <span class="comment">// 监听页面显示</span></span><br><span class="line">    onReady : <span class="keyword">function</span>(<span class="params"></span>) &#123; &#125;,         <span class="comment">// 监听页面初次渲染完成，一个页面只调用1次</span></span><br><span class="line">    onHide  : <span class="keyword">function</span>(<span class="params"></span>) &#123; &#125;,         <span class="comment">// 监听页面隐藏</span></span><br><span class="line">    <span class="attr">onUnload</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123; &#125;          <span class="comment">// 监听页面卸载，一个页面只调用1次</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="内嵌-wxs-脚本"><a href="#内嵌-wxs-脚本" class="headerlink" title="内嵌 wxs 脚本"></a>内嵌 wxs 脚本</h3><p>wxs 代码可以编写在 wxml 文件中的<code>&lt;wxs&gt;</code>标签内，wxml 文件中的每个 <code>&lt;wxs&gt;&lt;/wxs&gt;标签</code>，必须提供<code>module属性</code>，用来指定<code>当前wxs的模块名称</code>，方便在 wxml 中访问模块中的成员</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;m1.toUpper(username)&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">wxs</span> <span class="attr">module</span>=<span class="string">&quot;m1&quot;</span>&gt;</span></span><br><span class="line">// 将文本转为大写格式 zs -&gt; ZS</span><br><span class="line">    module.exports.toUpper = function(str) &#123;</span><br><span class="line">    return str.toUpperCase()</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">wxs</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="外联-wxs-脚本"><a href="#外联-wxs-脚本" class="headerlink" title="外联 wxs 脚本"></a>外联 wxs 脚本</h3><p>wxs 代码还可以编写在<code>以.wxs为后缀名的文件内</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tools.wxs 文件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">toLower</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> str.<span class="title function_">toLowerCase</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">toLower</span>: toLower</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>使用外联的 tools.wxs 脚本，并命名为 m2</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">wxs</span> <span class="attr">src</span>=<span class="string">&quot;../../utils/tools.wxs(相对路径)&quot;</span> <span class="attr">module</span>=<span class="string">&quot;m2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">wxs</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="新建组件"><a href="#新建组件" class="headerlink" title="新建组件"></a>新建组件</h3><p>步骤：<code>在根目录创建components文件夹-&gt;</code>.</p><p>​           <code>在该文件夹内创建一个名为test的文件夹-&gt;</code>.</p><p>​           <code>右击test文件夹选择新建Conponent并命名</code>.</p><h3 id="局部引用组件"><a href="#局部引用组件" class="headerlink" title="局部引用组件"></a>局部引用组件</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在页面的 .json 文件中，引入组件</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;usingComponents&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;my-test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/components/test/test&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在页面的 .wxml 文件中，使用组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-test</span>&gt;</span><span class="tag">&lt;/<span class="name">my-test</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="全局引用组件"><a href="#全局引用组件" class="headerlink" title="全局引用组件"></a>全局引用组件</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 app.json 文件中添加一个配置项</span></span><br><span class="line"><span class="attr">&quot;usingComponents&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;my-test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/components/test/test&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="组件和页面的区别"><a href="#组件和页面的区别" class="headerlink" title="组件和页面的区别"></a>组件和页面的区别</h3><p>(1). <code>组件的.json文件中需要声明 &quot;component&quot;: true 属性</code>.</p><p>(2). <code>组件的.js文件中调用的是 Component() 函数</code>.</p><p>(3). <code>组件的事件处理函数需要定义到 methods 节点中</code>.</p><h3 id="组件的样式隔离"><a href="#组件的样式隔离" class="headerlink" title="组件的样式隔离"></a>组件的样式隔离</h3><p>(1). <code>app.wxss</code>中的全局样式对组件无效</p><p>(2). 只有<code>class选择器</code>会有样式隔离效果，id选择器，属性选择器，标签选择器</p><h3 id="修改组件的样式隔离选项"><a href="#修改组件的样式隔离选项" class="headerlink" title="修改组件的样式隔离选项"></a>修改组件的样式隔离选项</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在组件的 .js 文件中新增如下配置</span></span><br><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">    <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">styleIsolation</span>: <span class="string">&quot;isolated | apply-shared | shared&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 或在组件的 .json 文件中新增如下配置</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;styleIsolation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;isolated | apply-shared | shared&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>styleIsolation的可选值</code></p><p>(1). <code>isolated</code>：表示启用<code>样式隔离</code>.</p><p>(2). <code>apply-shared</code>：表示<code>页面wxss样式将影响到自定义组件</code>，但组件不会影响页面</p><p>(3). <code>shared</code>：表示<code>页面和组件互相影响</code>，<code>也能影响其它配置值为 apply-shared | shared 的组件</code>.</p><h3 id="组件接收外界传递的数据"><a href="#组件接收外界传递的数据" class="headerlink" title="组件接收外界传递的数据"></a>组件接收外界传递的数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">    <span class="attr">properties</span>: &#123;</span><br><span class="line">        <span class="attr">max</span>: &#123;<span class="comment">// 完整定义属性的方式（当需要指定默认值时建议使用）</span></span><br><span class="line">            <span class="attr">type</span>: number,<span class="comment">// 属性值的数据类型</span></span><br><span class="line">            <span class="attr">value</span>: <span class="number">10</span><span class="comment">// 属性默认值</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">max</span>: <span class="title class_">Number</span><span class="comment">// 简化定义属性的方式</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="组件的数据监听器"><a href="#组件的数据监听器" class="headerlink" title="组件的数据监听器"></a>组件的数据监听器</h3><p>数据监听器用于<code>监听和响应任何属性和数据字段的变化，从而执行特定的操作</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">    <span class="attr">observers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;字段A,字段B&#x27;</span>: <span class="keyword">function</span>(<span class="params">字段A的新值，字段B的新值</span>) &#123;</span><br><span class="line">            <span class="comment">// do something...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="组件监听对象属性的变化"><a href="#组件监听对象属性的变化" class="headerlink" title="组件监听对象属性的变化"></a>组件监听对象属性的变化</h3><p>数据监听器支持监听对象中<code>单个</code>或<code>多个属性</code>的变化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">    <span class="attr">observers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;对象.属性A,对象.属性B&#x27;</span>: <span class="keyword">function</span>(<span class="params">属性A的新值，属性B的新值</span>) &#123;</span><br><span class="line">            <span class="comment">// 触发此监听器的3种情况</span></span><br><span class="line">            <span class="comment">// [为属性A赋值] 使用 setData 设置 this.data.对象.属性A 时触发</span></span><br><span class="line">            <span class="comment">// [为属性B赋值] 使用 setData 设置 this.data.对象.属性B 时触发</span></span><br><span class="line">            <span class="comment">// [直接为对象赋值] 使用 setData 设置 this.data.对象 时触发</span></span><br><span class="line">            <span class="comment">// do something...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>可以使用<code>rgb.**</code>来监听对象上所有属性的变化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">observers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;rgb.**&#x27;</span>: <span class="keyword">function</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        <span class="attr">fullColor</span>: <span class="string">`<span class="subst">$&#123;obj.r&#125;</span>,<span class="subst">$&#123;obj.g&#125;</span>,<span class="subst">$&#123;obj.b&#125;</span>`</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义纯数据字段"><a href="#定义纯数据字段" class="headerlink" title="定义纯数据字段"></a>定义纯数据字段</h3><p><code>纯数据字段</code>指的是那些<code>不用于界面渲染的data字段</code>,用于提升<code>页面更新的性能</code></p><p>在 <code>Component构造器</code>的 <code>options节点</code>中，指定<code>pureDataPattern</code>为一个<code>正则表达式</code>，字段名符合这个正则表达式的字段将被<code>定义为纯数据字段</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">    <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="comment">// 指定所有 _开头的数据字段为纯数据字段</span></span><br><span class="line">        <span class="attr">pureDataPattern</span>: <span class="regexp">/^_/</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">a</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">_b</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="组件的生命周期函数"><a href="#组件的生命周期函数" class="headerlink" title="组件的生命周期函数"></a>组件的生命周期函数</h3><div class="table-container"><table><thead><tr><th>声明周期函数</th><th>描述说明</th></tr></thead><tbody><tr><td>created</td><td>在组件实例刚刚被创建时执行</td></tr><tr><td>attached</td><td>在组件实例进入页面节点树时执行</td></tr><tr><td>ready</td><td>在组件在视图层布局完成后执行</td></tr><tr><td>moved</td><td>在组件实例被移动到节点树另一个位置时执行</td></tr><tr><td>detached</td><td>在组件实例被从页面节点树移除时执行</td></tr><tr><td>error</td><td>每当组件方法抛出错误时执行</td></tr></tbody></table></div><h3 id="使用-lifetimes节点-定义组件生命周期"><a href="#使用-lifetimes节点-定义组件生命周期" class="headerlink" title="使用 lifetimes节点 定义组件生命周期"></a>使用 lifetimes节点 定义组件生命周期</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">    <span class="comment">// 推荐用法</span></span><br><span class="line">    <span class="attr">lifetimes</span>: &#123;</span><br><span class="line">        <span class="title function_">attached</span>(<span class="params"></span>) &#123; &#125;, <span class="comment">// 在组件实例进入页面节点树时执行</span></span><br><span class="line">        <span class="title function_">detached</span>(<span class="params"></span>) &#123; &#125;, <span class="comment">// 在组件实例被从页面节点树移除时执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="组件所在页面的生命周期"><a href="#组件所在页面的生命周期" class="headerlink" title="组件所在页面的生命周期"></a>组件所在页面的生命周期</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">    <span class="attr">pageLifetimes</span>: &#123;</span><br><span class="line">        <span class="attr">show</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123; &#125;,   <span class="comment">// 页面被展示</span></span><br><span class="line">        <span class="attr">hide</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123; &#125;,   <span class="comment">// 页面被隐藏</span></span><br><span class="line">        <span class="attr">resize</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123; &#125;, <span class="comment">// 页面尺寸变化</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="父子组件之间通信的3种方法"><a href="#父子组件之间通信的3种方法" class="headerlink" title="父子组件之间通信的3种方法"></a>父子组件之间通信的3种方法</h3><p>(1). <code>属性绑定</code>：用于<code>父组件</code>向<code>子组件</code>的指定属性设置数据，仅能设置 JSON 兼容的数据</p><p>(2). <code>事件绑定</code>：用于<code>子组件</code>向<code>父组件</code>传递数据，可以传递任意数据</p><p>(3). <code>获取组件实例</code>：父组件还可以通过<code>this.selectComponent()</code>获取子组件实例对象，这样就可以直接访问子组件任意数据和方法</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Github的提交代码流程</title>
      <link href="/2022/12/03/Git%E7%9A%84%E6%8F%90%E4%BA%A4%E6%B5%81%E7%A8%8B/"/>
      <url>/2022/12/03/Git%E7%9A%84%E6%8F%90%E4%BA%A4%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初次将代码提交至仓库</span></span><br><span class="line">(<span class="number">1</span>). 在<span class="title class_">VSCode</span>创建与<span class="title class_">Github</span>上的<span class="title class_">Repository</span>(仓库)同名的文件夹</span><br><span class="line">(<span class="number">2</span>). 将要上传的文件放入该文件夹</span><br><span class="line">(<span class="number">3</span>). 在终端将路径切换到该文件夹所在的命令</span><br><span class="line">(<span class="number">4</span>). 执行 git init</span><br><span class="line">(<span class="number">5</span>). 执行 git add . (.代表全部提交,也可以指定某个文件)</span><br><span class="line">(<span class="number">6</span>). 执行 git commit -m <span class="string">&quot;这里添加注释&quot;</span></span><br><span class="line">(<span class="number">7</span>). 执行 git branch -M main</span><br><span class="line">(<span class="number">8</span>). 执行 git remote add origin <span class="attr">https</span>:<span class="comment">//github.com/hanekawasuki/(仓库名).git</span></span><br><span class="line">(<span class="number">9</span>). 执行 git push -u origin main</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新代码至仓库</span></span><br><span class="line">(<span class="number">1</span>). 执行 git clone (项目的url)</span><br><span class="line">(<span class="number">2</span>). 进入克隆的项目内</span><br><span class="line">(<span class="number">3</span>). 执行 git add *</span><br><span class="line">(<span class="number">4</span>). 执行 commit -m <span class="string">&quot;这里添加注释&quot;</span></span><br><span class="line">(<span class="number">5</span>). 执行 git push</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
